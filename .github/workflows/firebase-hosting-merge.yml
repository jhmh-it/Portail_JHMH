# 🚀 Workflow CD - Déploiement Production
# Déploie automatiquement sur Firebase Hosting + Functions quand du code est merged sur main

name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permet déploiement manuel
    inputs:
      deploy_functions:
        description: 'Déployer aussi les Cloud Functions?'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # 🔍 Vérifications pré-déploiement
  pre-deployment-checks:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔍 Quality Gate Check
        id: check
        run: |
          echo "🔍 Vérification des quality gates..."

          # Vérifier si les tests passent
          npm run lint
          npm run type-check
          npm run build

          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Quality gates passés"
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}

      - name: 📊 Generate Version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-${GITHUB_SHA:0:7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📊 Version: $VERSION"

  # 🏗️ Build de Production
  build-production:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🏗️ Build for Production
        run: |
          echo "🏗️ Building for production..."
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}

      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            .next
            out
            public
          retention-days: 7

  # 🔒 Préparation Cloud Functions Node.js
  prepare-functions:
    name: 🔒 Prepare Cloud Functions
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Functions Dependencies
        working-directory: functions
        run: |
          echo "📦 Installation des dépendances Node.js Functions..."
          npm ci

      - name: 🧪 Validate Functions
        working-directory: functions
        run: |
          echo "🧪 Validation des Cloud Functions Node.js..."

          # Build TypeScript
          echo "🔨 Build des Cloud Functions..."
          npm run build

          # Tests
          echo "🧪 Tests des Cloud Functions..."
          npm run test

          # Linting
          echo "🔍 Linting des Cloud Functions..."
          npm run lint

      - name: 📁 Upload Functions Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: functions/
          retention-days: 7

  # 🚀 Déploiement Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-production, prepare-functions]
    timeout-minutes: 20
    environment:
      name: production
      url: https://portail-jhmh.web.app

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📁 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build

      - name: 📁 Download Functions Artifacts
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: functions/

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🌐 Deploy Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORTAIL_JHMH }}
          channelId: live
          projectId: portail-jhmh

      - name: 🔒 Deploy Cloud Functions
        if: github.event.inputs.deploy_functions != 'false'
        run: |
          echo "🔒 Déploiement des Cloud Functions Node.js..."

          # Installation de Firebase CLI
          npm install -g firebase-tools

          # Authentification avec service account
          echo "$FIREBASE_SERVICE_ACCOUNT" > /tmp/service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account.json

          # Installation et build des Cloud Functions
          echo "📦 Installation des dépendances Functions..."
          cd functions
          npm ci

          echo "🔨 Build des Cloud Functions..."
          npm run build

          echo "🧪 Tests des Cloud Functions..."
          npm run test

          # Retour au répertoire racine
          cd ..

          # Déploiement des functions
          echo "🚀 Déploiement Firebase Functions..."
          if ! firebase deploy --only functions --project portail-jhmh; then
            echo "❌ Échec du déploiement des Cloud Functions"
            echo ""
            echo "🔍 Diagnostic :"
            echo "Working directory: $(pwd)"
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "Functions directory exists: $(test -d functions && echo 'YES' || echo 'NO')"
            echo "Functions lib directory exists: $(test -d functions/lib && echo 'YES' || echo 'NO')"
            echo ""
            echo "🔍 Causes possibles :"
            echo "1. APIs Google Cloud manquantes (cloudbuild.googleapis.com, artifactregistry.googleapis.com)"
            echo "2. Permissions insuffisantes du service account"
            echo "3. Quota Google Cloud dépassé"
            echo "4. Erreur de build ou test des Cloud Functions"
            echo ""
            echo "📖 Guide de résolution :"
            echo "   → Voir docs/FIREBASE_APIS_SETUP.md"
            echo "   → Console Google Cloud : https://console.cloud.google.com/apis/dashboard?project=portail-jhmh"
            echo ""
            echo "🚀 Actions recommandées :"
            echo "   1. Activer Cloud Build API : https://console.cloud.google.com/apis/library/cloudbuild.googleapis.com?project=portail-jhmh"
            echo "   2. Activer Artifact Registry API : https://console.cloud.google.com/apis/library/artifactregistry.googleapis.com?project=portail-jhmh"
            exit 1
          fi

          # Nettoyage
          rm -f /tmp/service-account.json
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORTAIL_JHMH }}

  # 🧪 Tests Post-Déploiement
  post-deployment-tests:
    name: 🧪 Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🌐 Health Check - Hosting
        run: |
          echo "🌐 Vérification du déploiement Hosting..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://portail-jhmh.web.app)
          if [ $response = "200" ]; then
            echo "✅ Hosting déployé avec succès"
          else
            echo "❌ Erreur de déploiement Hosting (HTTP $response)"
            exit 1
          fi

      - name: 🔒 Health Check - Functions
        run: |
          echo "🔒 Vérification des Cloud Functions..."
          # Test de la fonction de health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://europe-west1-portail-jhmh.cloudfunctions.net/healthCheck")
          if [ $response = "200" ]; then
            echo "✅ Cloud Functions déployées avec succès"
          else
            echo "⚠️ Cloud Functions peuvent ne pas être déployées (HTTP $response)"
          fi

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Déploiement Production Réussi" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Détails du déploiement" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.pre-deployment-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branche**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://portail-jhmh.web.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Services déployés" >> $GITHUB_STEP_SUMMARY
          echo "- [x] 🌐 Firebase Hosting" >> $GITHUB_STEP_SUMMARY
          echo "- [x] 🔒 Cloud Functions (Auth Restriction)" >> $GITHUB_STEP_SUMMARY

  # 📢 Notifications
  notify-deployment:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: always()

    steps:
      - name: 🎉 Success Notification
        if: needs.deploy-production.result == 'success' && needs.post-deployment-tests.result == 'success'
        run: |
          echo "🎉 Déploiement production réussi !"
          echo "🌐 URL: https://portail-jhmh.web.app"
          echo "📊 Version: ${{ needs.pre-deployment-checks.outputs.version }}"

          # Ici vous pouvez ajouter des notifications Slack, Teams, etc.

      - name: 🚨 Failure Notification
        if: needs.deploy-production.result == 'failure' || needs.post-deployment-tests.result == 'failure'
        run: |
          echo "🚨 Échec du déploiement production"
          echo "🔧 Vérifiez les logs ci-dessus"

          # Ici vous pouvez ajouter des notifications d'alerte
