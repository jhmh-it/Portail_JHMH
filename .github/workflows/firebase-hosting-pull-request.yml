# 🔍 Workflow PR - Preview et Tests
# Déploie une preview et valide le code sur chaque Pull Request

name: PR Preview & Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  checks: write
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '20'

jobs:
  # 🔍 Validation rapide pour feedback immédiat
  quick-validation:
    name: 🚀 Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: ⚡ Quick Checks
        run: |
          echo "⚡ Validation rapide..."
          npm run lint
          npm run type-check

  # 🏗️ Build et Tests Complets
  build-and-test:
    name: 🏗️ Build & Comprehensive Tests
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 15

    outputs:
      build-success: ${{ steps.build.outputs.success }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🧹 Linting & Formatting Check
        run: |
          echo "🧹 Vérification du code..."
          npm run lint
          npm run format:check

      - name: 🔍 TypeScript Check
        run: npm run type-check

      - name: 🏗️ Build Application
        id: build
        run: |
          echo "🏗️ Building application..."
          npm run build
          echo "success=true" >> $GITHUB_OUTPUT
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}

      - name: 📁 Cache Build for Preview
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
            public
          key: ${{ runner.os }}-pr-build-${{ github.event.pull_request.head.sha }}

  # 🔒 Validation Functions Node.js
  validate-functions:
    name: 🔒 Cloud Functions Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 10

    outputs:
      functions-valid: ${{ steps.validate.outputs.valid }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Functions Dependencies
        working-directory: functions
        run: |
          echo "📦 Installation des dépendances Node.js Functions..."
          npm ci

      - name: 🧪 Validate Functions
        id: validate
        working-directory: functions
        run: |
          echo "🧪 Validation des Cloud Functions Node.js..."

          # Build TypeScript
          echo "🔨 Build des Cloud Functions..."
          npm run build

          # Tests
          echo "🧪 Tests des Cloud Functions..."
          npm run test

          # Linting
          echo "🔍 Linting des Cloud Functions..."
          npm run lint

          echo "valid=true" >> $GITHUB_OUTPUT
          echo "✅ Cloud Functions Node.js validées"

  # 🌐 Déploiement Preview
  deploy-preview:
    name: 🌐 Deploy Preview
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    needs: [build-and-test, validate-functions]
    timeout-minutes: 15

    outputs:
      preview-url: ${{ steps.deploy.outputs.details_url }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 📁 Restore Build Cache
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
            public
          key: ${{ runner.os }}-pr-build-${{ github.event.pull_request.head.sha }}

      - name: 🏗️ Build if Cache Miss
        run: |
          if [ ! -d ".next" ]; then
            echo "🏗️ Cache miss, rebuilding..."
            npm run build
          else
            echo "✅ Using cached build"
          fi
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}

      - name: 🌐 Deploy to Preview
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORTAIL_JHMH }}
          projectId: portail-jhmh
          expires: 7d

  # 🧪 Tests E2E sur Preview
  e2e-tests:
    name: 🧪 E2E Tests on Preview
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: needs.deploy-preview.outputs.preview-url
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🌐 Basic Smoke Tests
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          echo "🧪 Testing preview: $PREVIEW_URL"

          # Test basique de chargement
          response=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL")
          if [ $response = "200" ]; then
            echo "✅ Preview accessible"
          else
            echo "❌ Preview inaccessible (HTTP $response)"
            exit 1
          fi

          # Test des routes principales
          routes=("/" "/login")
          for route in "${routes[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL$route")
            if [ $response = "200" ]; then
              echo "✅ Route $route OK"
            else
              echo "⚠️ Route $route: HTTP $response"
            fi
          done

  # 📊 Analyse de Performance
  performance-analysis:
    name: 📊 Performance Analysis
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: needs.deploy-preview.outputs.preview-url
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Lighthouse
        run: npm install -g lighthouse

      - name: 🚀 Lighthouse Analysis
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          echo "🚀 Analyse Lighthouse: $PREVIEW_URL"

          lighthouse "$PREVIEW_URL" \
            --output=json \
            --output-path=./lighthouse-results.json \
            --chrome-flags="--headless --no-sandbox" \
            --quiet

      - name: 📊 Extract Performance Metrics
        run: |
          if [ -f "./lighthouse-results.json" ]; then
            node -e "
              const results = JSON.parse(require('fs').readFileSync('./lighthouse-results.json'));
              const scores = results.lhr.categories;
              
              console.log('📊 **Performance Scores:**');
              console.log('- Performance:', Math.round(scores.performance.score * 100));
              console.log('- Accessibility:', Math.round(scores.accessibility.score * 100));
              console.log('- Best Practices:', Math.round(scores['best-practices'].score * 100));
              console.log('- SEO:', Math.round(scores.seo.score * 100));
            " > performance-summary.txt
            
            cat performance-summary.txt
          fi

  # 💬 Commentaire Résumé PR
  pr-summary:
    name: 💬 PR Summary Comment
    runs-on: ubuntu-latest
    needs:
      [
        build-and-test,
        validate-functions,
        deploy-preview,
        e2e-tests,
        performance-analysis,
      ]
    if: always()

    steps:
      - name: 💬 Update PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const buildSuccess = '${{ needs.build-and-test.outputs.build-success }}' === 'true';
            const functionsValid = '${{ needs.validate-functions.outputs.functions-valid }}' === 'true';
            const previewUrl = '${{ needs.deploy-preview.outputs.preview-url }}';
            const e2eSuccess = '${{ needs.e2e-tests.result }}' === 'success';

            let body = `## 🔍 PR Preview & Validation Results\n\n`;

            body += `### ✅ Checks\n`;
            body += `- ${buildSuccess ? '✅' : '❌'} Build & TypeScript\n`;
            body += `- ${functionsValid ? '✅' : '❌'} Cloud Functions Node.js Validation\n`;
            body += `- ${e2eSuccess ? '✅' : '❌'} E2E Tests\n\n`;

            if (previewUrl) {
              body += `### 🌐 Preview Deployment\n`;
              body += `🔗 **Preview URL**: ${previewUrl}\n\n`;
              body += `*Preview expires in 7 days*\n\n`;
            }

            body += `### 📊 Quality Gate\n`;
            if (buildSuccess && functionsValid) {
              body += `🎉 **Ready to merge!** All quality checks passed.\n`;
            } else {
              body += `🔧 **Issues detected** - Please address the failing checks above.\n`;
            }

            // Trouver le commentaire existant ou en créer un nouveau
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(
              comment => comment.user.type === 'Bot' && comment.body.includes('🔍 PR Preview & Validation Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
