'use client';

import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { ChevronLeft, ChevronRight, Building, Calendar } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import type { ActifsFilters, ActifsResponse } from '@/types/actifs';

interface ActifsTableProps {
  data: ActifsResponse | undefined;
  isLoading: boolean;
  isFetching: boolean;
  error: Error | null;
  filters: ActifsFilters;
  onPageChange: (page: number) => void;
}

export function ActifsTable({
  data,
  isLoading,
  isFetching,
  error,
  filters,
  onPageChange,
}: ActifsTableProps) {
  // Calcul de la pagination
  const currentPage = filters.page ?? 1;
  const pageSize = filters.page_size ?? 20;
  const totalItems = data?.total ?? 0;
  const totalPages = Math.ceil(totalItems / pageSize);
  const hasNextPage = currentPage < totalPages;
  const hasPrevPage = currentPage > 1;

  const formatDate = (dateStr: string) => {
    try {
      const date = new Date(dateStr);
      return format(date, 'dd MMM yyyy', { locale: fr });
    } catch {
      return dateStr;
    }
  };

  const formatSuperficie = (superficie: number | null) => {
    if (superficie === null || superficie === undefined) return '-';
    return `${superficie.toLocaleString('fr-FR')} m²`;
  };

  // Loading skeleton
  if (isLoading) {
    return (
      <div className="space-y-4">
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Listing</TableHead>
                <TableHead className="text-center">Superficie</TableHead>
                <TableHead>Date d&apos;ouverture</TableHead>
                <TableHead>N° Mairie</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {[...Array(pageSize)].map((_, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <Skeleton className="h-4 w-48" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-4 w-16" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-4 w-20" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-4 w-24" />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        <div className="flex justify-center">
          <Skeleton className="h-10 w-32" />
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <div className="text-red-500 mb-4">
          <Building className="h-12 w-12 mx-auto" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Erreur de chargement
        </h3>
        <p className="text-gray-500 mb-4">
          {error.message || 'Impossible de charger les actifs'}
        </p>
        <Button variant="outline" onClick={() => window.location.reload()}>
          Réessayer
        </Button>
      </div>
    );
  }

  // Empty state
  if (!data?.actifs || data.actifs.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <Building className="h-12 w-12 text-gray-400 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Aucun actif trouvé
        </h3>
        <p className="text-gray-500">
          Aucun actif ne correspond aux critères de recherche actuels.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Table */}
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="font-medium">Listing</TableHead>
              <TableHead className="font-medium text-center">
                Superficie
              </TableHead>
              <TableHead className="font-medium">
                Date d&apos;ouverture
              </TableHead>
              <TableHead className="font-medium">N° Mairie</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.actifs.map(actif => (
              <TableRow
                key={actif.id_opening}
                className={isFetching ? 'opacity-50' : ''}
              >
                <TableCell>
                  <div className="flex flex-col">
                    <span className="font-medium text-foreground">
                      {actif.listing_complet}
                    </span>
                    <span className="text-xs text-muted-foreground">
                      ID: {actif.id_opening}
                    </span>
                  </div>
                </TableCell>
                <TableCell className="text-center">
                  {formatSuperficie(actif.superficie_m2)}
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-1 text-sm">
                    <Calendar className="h-3 w-3 text-muted-foreground" />
                    {formatDate(actif.date_ouverture)}
                  </div>
                </TableCell>
                <TableCell className="font-mono text-sm">
                  {actif.numero_mairie || '-'}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <span>
              Page {currentPage} sur {totalPages}
            </span>
            <span>•</span>
            <span>
              {totalItems} actif{totalItems > 1 ? 's' : ''} au total
            </span>
          </div>

          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => onPageChange(currentPage - 1)}
              disabled={!hasPrevPage || isFetching}
            >
              <ChevronLeft className="h-4 w-4 mr-1" />
              Précédent
            </Button>

            {/* Page numbers */}
            <div className="flex items-center gap-1">
              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                let pageNumber: number;

                if (totalPages <= 5) {
                  pageNumber = i + 1;
                } else if (currentPage <= 3) {
                  pageNumber = i + 1;
                } else if (currentPage >= totalPages - 2) {
                  pageNumber = totalPages - 4 + i;
                } else {
                  pageNumber = currentPage - 2 + i;
                }

                return (
                  <Button
                    key={pageNumber}
                    variant={pageNumber === currentPage ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => onPageChange(pageNumber)}
                    disabled={isFetching}
                    className="w-8 h-8 p-0"
                  >
                    {pageNumber}
                  </Button>
                );
              })}
            </div>

            <Button
              variant="outline"
              size="sm"
              onClick={() => onPageChange(currentPage + 1)}
              disabled={!hasNextPage || isFetching}
            >
              Suivant
              <ChevronRight className="h-4 w-4 ml-1" />
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
