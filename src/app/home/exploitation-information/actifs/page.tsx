'use client';

import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import {
  Search,
  Filter,
  RefreshCw,
  Building,
  X,
  CalendarIcon,
  Loader2,
} from 'lucide-react';
import { useState, useEffect } from 'react';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import { Calendar } from '@/components/ui/calendar';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useActifs } from '@/hooks/useActifs';
import { useListingsActifs } from '@/hooks/useListingsActifs';
import { cn } from '@/lib/utils';
import { useLoadingStore } from '@/stores/loading-store';
import type { ActifsFilters } from '@/types/actifs';

import { ActifsTable } from './components/ActifsTable';

// SITES sera récupéré dynamiquement via useActifs()

const TYPES_LOGEMENT: { value: string; label: string }[] = [
  { value: 'STUDIO', label: 'Studio' },
  { value: 'T1', label: 'T1' },
  { value: 'T2', label: 'T2' },
  { value: 'T2+', label: 'T2+' },
  { value: 'T2-', label: 'T2-' },
  { value: 'T3', label: 'T3' },
  { value: 'T3+', label: 'T3+' },
  { value: 'T3-', label: 'T3-' },
  { value: 'PMR', label: 'PMR' },
  { value: 'Comm.', label: 'Communicant' },
  { value: 'C.', label: 'C.' },
];

const ORDER_BY_OPTIONS: { value: string; label: string }[] = [
  { value: 'listing_complet', label: 'Nom du listing' },
  { value: 'date_ouverture', label: "Date d'ouverture" },
  { value: 'superficie_m2', label: 'Superficie' },
  { value: 'code_site', label: 'Code site' },
];

const PAGE_SIZES = [
  { value: '10', label: '10 résultats' },
  { value: '20', label: '20 résultats' },
  { value: '50', label: '50 résultats' },
  { value: '100', label: '100 résultats' },
];

export default function ActifsPage() {
  // Hook pour récupérer la liste des sites (pour la dropdown)
  const { actifs: sites, isLoading: isLoadingSites } = useActifs();

  const [filters, setFilters] = useState<ActifsFilters>({
    page: 1,
    page_size: 20,
    order_by: 'listing_complet',
    order_direction: 'ASC',
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(true);
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const { hideLoading } = useLoadingStore();

  // Hook pour récupérer les listings détaillés
  const { data, isLoading, isFetching, error, refetch, isSuccess } =
    useListingsActifs({
      filters,
    });

  // Extraire la liste des sites pour la dropdown
  const sitesList = sites.map(site => ({
    value: site.label,
    label: site.label,
  }));

  // Fermer la modale de loading quand les données sont chargées
  useEffect(() => {
    if (!isLoading) {
      hideLoading();
    }
  }, [isLoading, hideLoading]);

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    {
      label: 'Exploitation information',
      href: '/home/exploitation-information',
    },
    { label: 'Actifs' },
  ];

  const handleSearch = () => {
    setFilters(prev => ({
      ...prev,
      q: searchQuery || undefined,
      page: 1, // Reset to first page on new search
    }));
  };

  const handleFilterChange = (
    key: keyof ActifsFilters,
    value: string | number | undefined
  ) => {
    setFilters(prev => ({
      ...prev,
      [key]: value,
      page: 1, // Reset to first page on filter change
    }));
  };

  const handlePageChange = (page: number) => {
    setFilters(prev => ({ ...prev, page }));
  };

  const handlePageSizeChange = (page_size: string) => {
    setFilters(prev => ({
      ...prev,
      page_size: parseInt(page_size),
      page: 1,
    }));
  };

  const handleClearFilters = () => {
    setFilters({
      page: 1,
      page_size: 20,
      order_by: 'listing_complet',
      order_direction: 'ASC',
    });
    setSearchQuery('');
  };

  // Check if any filters are active
  const hasActiveFilters =
    Boolean(searchQuery) ||
    Boolean(filters.code_site) ||
    Boolean(filters.type_logement) ||
    Boolean(filters.superficie_min) ||
    Boolean(filters.superficie_max) ||
    Boolean(filters.date_ouverture_from) ||
    Boolean(filters.date_ouverture_to);

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <div className="flex flex-col gap-2">
          <div className="flex items-center gap-3">
            <Building className="h-8 w-8 text-primary" />
            <h1 className="text-3xl font-bold tracking-tight">Actifs</h1>
          </div>
          <p className="text-muted-foreground">
            Gérez et consultez tous les actifs immobiliers en temps réel
          </p>
        </div>

        {/* Filters */}
        <Card className="shadow-sm">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <CardTitle className="text-base font-medium flex items-center gap-2">
                <Filter className="h-4 w-4" />
                Filtres de recherche
              </CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowFilters(!showFilters)}
                className="text-muted-foreground"
              >
                {showFilters ? 'Masquer' : 'Afficher'}
              </Button>
            </div>
          </CardHeader>

          {showFilters && (
            <CardContent className="pt-0">
              {/* Search Bar */}
              <div className="mb-6">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Rechercher par nom de listing, site ou type..."
                    value={searchQuery}
                    onChange={e => setSearchQuery(e.target.value)}
                    onKeyDown={e => e.key === 'Enter' && handleSearch()}
                    className="pl-10 pr-28 h-11 bg-muted/50 border-muted-foreground/20 focus:bg-background"
                  />
                  <Button
                    onClick={handleSearch}
                    size="sm"
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8"
                  >
                    Rechercher
                  </Button>
                </div>
              </div>

              {/* Filter Grid */}
              <div className="space-y-4">
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                  {/* Site filter */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Site</Label>
                    <Select
                      value={filters.code_site ?? 'all'}
                      onValueChange={value =>
                        handleFilterChange(
                          'code_site',
                          value === 'all' ? undefined : value
                        )
                      }
                    >
                      <SelectTrigger className="h-10">
                        <div className="flex items-center gap-2 w-full">
                          {isLoadingSites && (
                            <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
                          )}
                          <SelectValue
                            placeholder={
                              isLoadingSites
                                ? 'Chargement des sites...'
                                : 'Tous les sites'
                            }
                          />
                        </div>
                      </SelectTrigger>
                      <SelectContent>
                        {isLoadingSites ? (
                          <div className="flex items-center justify-center py-4">
                            <Loader2 className="h-4 w-4 animate-spin mr-2" />
                            <span className="text-sm text-muted-foreground">
                              Chargement...
                            </span>
                          </div>
                        ) : (
                          <>
                            <SelectItem value="all">Tous les sites</SelectItem>
                            {sitesList.map(site => (
                              <SelectItem key={site.value} value={site.value}>
                                <div className="flex items-center gap-2">
                                  <div
                                    className="h-2 w-2 rounded-full bg-blue-500"
                                    aria-hidden="true"
                                  />
                                  <span className="font-medium">
                                    {site.label}
                                  </span>
                                </div>
                              </SelectItem>
                            ))}
                          </>
                        )}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Type de logement filter */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Type de logement
                    </Label>
                    <Select
                      value={filters.type_logement ?? 'all'}
                      onValueChange={value =>
                        handleFilterChange(
                          'type_logement',
                          value === 'all' ? undefined : value
                        )
                      }
                    >
                      <SelectTrigger className="h-10">
                        <SelectValue placeholder="Tous les types" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Tous les types</SelectItem>
                        {TYPES_LOGEMENT.map(type => (
                          <SelectItem key={type.value} value={type.value}>
                            {type.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Order by */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Trier par</Label>
                    <Select
                      value={filters.order_by ?? 'listing_complet'}
                      onValueChange={value =>
                        handleFilterChange('order_by', value)
                      }
                    >
                      <SelectTrigger className="h-10">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {ORDER_BY_OPTIONS.map(option => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Order direction */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Direction</Label>
                    <Select
                      value={filters.order_direction ?? 'ASC'}
                      onValueChange={value =>
                        handleFilterChange('order_direction', value)
                      }
                    >
                      <SelectTrigger className="h-10">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="ASC">Croissant</SelectItem>
                        <SelectItem value="DESC">Décroissant</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Advanced Filters Section */}
                <div className="space-y-4 pt-4 border-t">
                  <div className="flex items-center gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        setShowAdvancedFilters(!showAdvancedFilters)
                      }
                      className="text-muted-foreground h-8 px-2"
                    >
                      <Filter className="h-3 w-3 mr-2" />
                      Filtres avancés
                      {showAdvancedFilters ? ' (masquer)' : ' (afficher)'}
                    </Button>
                  </div>

                  {showAdvancedFilters && (
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                      {/* Date d'ouverture depuis */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Date d&apos;ouverture (depuis)
                        </Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant="outline"
                              className={cn(
                                'w-full h-10 justify-start text-left font-normal',
                                !filters.date_ouverture_from &&
                                  'text-muted-foreground'
                              )}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {filters.date_ouverture_from
                                ? format(
                                    new Date(filters.date_ouverture_from),
                                    'dd MMMM yyyy',
                                    { locale: fr }
                                  )
                                : 'Sélectionner une date'}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={
                                filters.date_ouverture_from
                                  ? new Date(filters.date_ouverture_from)
                                  : undefined
                              }
                              onSelect={date =>
                                handleFilterChange(
                                  'date_ouverture_from',
                                  date ? format(date, 'yyyy-MM-dd') : undefined
                                )
                              }
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>

                      {/* Date d'ouverture jusqu'à */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Date d&apos;ouverture (jusqu&apos;à)
                        </Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant="outline"
                              className={cn(
                                'w-full h-10 justify-start text-left font-normal',
                                !filters.date_ouverture_to &&
                                  'text-muted-foreground'
                              )}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {filters.date_ouverture_to
                                ? format(
                                    new Date(filters.date_ouverture_to),
                                    'dd MMMM yyyy',
                                    { locale: fr }
                                  )
                                : 'Sélectionner une date'}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={
                                filters.date_ouverture_to
                                  ? new Date(filters.date_ouverture_to)
                                  : undefined
                              }
                              onSelect={date =>
                                handleFilterChange(
                                  'date_ouverture_to',
                                  date ? format(date, 'yyyy-MM-dd') : undefined
                                )
                              }
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>

                      {/* Superficie minimum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Superficie min (m²)
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 20"
                          value={filters.superficie_min ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'superficie_min',
                              e.target.value
                                ? parseFloat(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>

                      {/* Superficie maximum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Superficie max (m²)
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 100"
                          value={filters.superficie_max ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'superficie_max',
                              e.target.value
                                ? parseFloat(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>
                    </div>
                  )}
                </div>

                {/* Second row with page size and actions */}
                <div className="flex items-end justify-between gap-4 pt-2 border-t">
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Résultats par page
                    </Label>
                    <Select
                      value={filters.page_size?.toString() ?? '20'}
                      onValueChange={handlePageSizeChange}
                    >
                      <SelectTrigger className="w-[140px] h-10">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {PAGE_SIZES.map(size => (
                          <SelectItem key={size.value} value={size.value}>
                            {size.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    {hasActiveFilters && (
                      <Button
                        variant="outline"
                        onClick={handleClearFilters}
                        className="h-10"
                      >
                        <X className="h-4 w-4 mr-2" />
                        Réinitialiser
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      onClick={() => refetch()}
                      disabled={isFetching}
                      className="h-10"
                    >
                      <RefreshCw
                        className={`h-4 w-4 mr-2 ${isFetching ? 'animate-spin' : ''}`}
                      />
                      {isFetching ? 'Actualisation...' : 'Actualiser'}
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          )}
        </Card>

        {/* Results */}
        <Card className="shadow-sm overflow-visible">
          <CardHeader className="pb-4">
            <CardTitle className="text-base font-medium">
              Résultats
              {isSuccess && data && (
                <span className="text-sm font-normal text-muted-foreground ml-2">
                  ({data.total} actif{data.total > 1 ? 's' : ''})
                </span>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-0 px-6 pb-8 overflow-visible">
            <ActifsTable
              data={data}
              isLoading={isLoading}
              isFetching={isFetching}
              error={error}
              filters={filters}
              onPageChange={handlePageChange}
            />
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
