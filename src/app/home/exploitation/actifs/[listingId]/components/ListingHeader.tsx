'use client';

import { Building, Calendar, Copy, Hash } from 'lucide-react';
import { toast } from 'sonner';

import { Badge } from '@/components/ui/badge';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { formatDate } from '@/lib/format';

import type { ListingDetails } from '../hooks/useListingDetails';

interface ListingHeaderProps {
  listing: ListingDetails;
}

export function ListingHeader({ listing }: ListingHeaderProps) {
  const handleCopyId = async () => {
    try {
      await navigator.clipboard.writeText(listing.id);
      toast.success('ID copié dans le presse-papier');
    } catch {
      toast.error('Erreur lors de la copie');
    }
  };

  return (
    <div className="flex flex-col gap-4">
      <div className="flex items-start justify-between">
        <div className="flex items-center gap-3">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <h1
                  className="hover:text-primary/80 flex cursor-pointer items-center gap-2 text-3xl font-bold tracking-tight transition-colors"
                  onClick={handleCopyId}
                >
                  <Building className="text-primary h-8 w-8" />
                  {listing.title}
                </h1>
              </TooltipTrigger>
              <TooltipContent className="flex items-center gap-2">
                <Copy className="h-3 w-3" />
                <span>ID: {listing.id}</span>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>

      <div className="text-muted-foreground space-y-2">
        {listing.address && (
          <div className="flex items-center gap-2">
            <span>Adresse: {listing.address}</span>
          </div>
        )}
        {listing.nickname && (
          <div className="flex items-center gap-2">
            <Hash className="h-4 w-4" />
            <span>Surnom: {listing.nickname}</span>
          </div>
        )}
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4" />
          <span>Créé le: {formatDate(listing.created_at)}</span>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-sm">
            {listing.active ? (
              <Badge
                variant="secondary"
                className="border-green-200 bg-green-100 text-green-800"
              >
                Actif
              </Badge>
            ) : (
              <Badge
                variant="secondary"
                className="border-red-200 bg-red-100 text-red-800"
              >
                Inactif
              </Badge>
            )}
          </span>
          {listing.is_listed && (
            <Badge
              variant="secondary"
              className="border-blue-200 bg-blue-100 text-blue-800"
            >
              Listé
            </Badge>
          )}
        </div>
      </div>
    </div>
  );
}
