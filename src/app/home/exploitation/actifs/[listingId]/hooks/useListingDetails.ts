'use client';

import { useEffect, useState } from 'react';

export interface ListingDetails {
  id: string;
  title: string;
  nickname?: string;
  address?: string;
  accommodates: number;
  beds: number;
  bedrooms: number;
  bathrooms: number;
  property_type: string;
  timezone: string;
  active: boolean;
  is_listed: boolean;
  created_at: string;
  last_updated_at?: string | null;
  last_updated_timestamp?: string;
  prices?: {
    base_price: number;
    cleaning_fee: number;
    currency: string;
    extra_person_fee: number;
    guests_included: number;
    security_deposit_fee?: number | null;
    weekend_base_price?: number | null;
  };
  check_in_instructions?: {
    default_check_in_time: string;
    default_check_out_time: string;
    notes?: string | null;
    primary_method?: string | null;
  };
  cleaning_status?: {
    updated_at: string;
    value: string;
  };
  public_description?: {
    access?: string;
    neighborhood?: string;
    notes?: string;
    space?: string;
    summary?: string;
    transit?: string | null;
  };
}

interface UseListingDetailsReturn {
  listing: ListingDetails | null;
  isLoading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
}

export function useListingDetails(
  listingId: string | undefined
): UseListingDetailsReturn {
  const [listing, setListing] = useState<ListingDetails | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const load = async () => {
    if (!listingId) return;
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`/api/listings/${listingId}`);
      if (!response.ok)
        throw new Error('Impossible de récupérer les détails du listing');

      const result = await response.json();
      if (result.success && result.data) {
        setListing(result.data as ListingDetails);
      } else {
        throw new Error('Listing non trouvé');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Une erreur est survenue');
      setListing(null);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    void load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [listingId]);

  return { listing, isLoading, error, refetch: load };
}
