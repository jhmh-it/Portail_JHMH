'use client';

import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import {
  Building,
  MapPin,
  Users,
  Bed,
  Bath,
  Euro,
  Clock,
  Key,
  Shield,
  AlertCircle,
  Copy,
  Home,
  Sparkles,
  ChevronDown,
  FileText,
  MapPinned,
  Car,
  DoorOpen,
  StickyNote,
} from 'lucide-react';
import { useParams } from 'next/navigation';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { useLoadingStore } from '@/stores/loading-store';
import type { ListingDetails } from '@/types/listing';

export default function ActifDetailsPage() {
  const params = useParams();
  const listingId = params.listingId as string;
  const { hideLoading } = useLoadingStore();

  const [listing, setListing] = useState<ListingDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDescriptionOpen, setIsDescriptionOpen] = useState(true);

  useEffect(() => {
    const fetchListingDetails = async () => {
      try {
        setIsLoading(true);
        setError(null);

        const response = await fetch(`/api/listings/${listingId}`);

        if (!response.ok) {
          throw new Error('Impossible de récupérer les détails du listing');
        }

        const result = await response.json();

        if (result.success && result.data?.data?.length > 0) {
          setListing(result.data.data[0]);
        } else {
          throw new Error('Listing non trouvé');
        }
      } catch (err) {
        console.error('Erreur lors du chargement des détails:', err);
        setError(
          err instanceof Error ? err.message : 'Une erreur est survenue'
        );
      } finally {
        setIsLoading(false);
        hideLoading();
      }
    };

    if (listingId) {
      fetchListingDetails();
    }
  }, [listingId, hideLoading]);

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Exploitation', href: '/home/exploitation' },
    { label: 'Actifs', href: '/home/exploitation/actifs' },
    { label: listing?.title ?? listingId },
  ];

  const formatDateTime = (dateString: string | null): string => {
    if (!dateString) return '-';
    try {
      return format(new Date(dateString), 'dd MMM yyyy à HH:mm', {
        locale: fr,
      });
    } catch {
      return '-';
    }
  };

  const formatPrice = (price: number, currency: string = 'EUR'): string => {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency,
    }).format(price);
  };

  const handleCopyId = async () => {
    if (listing?.id) {
      try {
        await navigator.clipboard.writeText(listing.id);
        toast.success('ID copié dans le presse-papier');
      } catch {
        toast.error('Erreur lors de la copie');
      }
    }
  };

  const getCleaningStatusBadge = (status: string) => {
    const statusConfig = {
      clean: {
        label: 'Propre',
        className: 'bg-green-100 text-green-800 border-green-200',
        icon: Sparkles,
      },
      dirty: {
        label: 'À nettoyer',
        className: 'bg-red-100 text-red-800 border-red-200',
        icon: AlertCircle,
      },
      cleaning: {
        label: 'En nettoyage',
        className: 'bg-yellow-100 text-yellow-800 border-yellow-200',
        icon: Clock,
      },
    };

    const config =
      statusConfig[status as keyof typeof statusConfig] || statusConfig.dirty;
    const Icon = config.icon;

    return (
      <Badge variant="secondary" className={config.className}>
        <Icon className="h-3 w-3 mr-1" />
        {config.label}
      </Badge>
    );
  };

  if (isLoading) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col gap-6 py-6">
          <div className="flex items-center gap-3">
            <Skeleton className="h-8 w-8" />
            <Skeleton className="h-8 w-64" />
          </div>
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <Skeleton className="h-6 w-48" />
              </CardHeader>
              <CardContent className="space-y-4">
                {[...Array(6)].map((_, i) => (
                  <div key={i} className="flex justify-between">
                    <Skeleton className="h-4 w-24" />
                    <Skeleton className="h-4 w-32" />
                  </div>
                ))}
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <Skeleton className="h-6 w-48" />
              </CardHeader>
              <CardContent className="space-y-4">
                {[...Array(6)].map((_, i) => (
                  <div key={i} className="flex justify-between">
                    <Skeleton className="h-4 w-24" />
                    <Skeleton className="h-4 w-32" />
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  if (error) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col items-center justify-center py-12">
          <AlertCircle className="h-12 w-12 text-destructive mb-4" />
          <h2 className="text-xl font-semibold mb-2">Erreur de chargement</h2>
          <p className="text-muted-foreground mb-4">{error}</p>
          <Button onClick={() => window.location.reload()}>Réessayer</Button>
        </div>
      </DashboardLayout>
    );
  }

  if (!listing) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col items-center justify-center py-12">
          <Building className="h-12 w-12 text-muted-foreground mb-4" />
          <h2 className="text-xl font-semibold mb-2">Listing non trouvé</h2>
          <p className="text-muted-foreground">
            Aucun listing trouvé avec cet identifiant.
          </p>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <div className="flex flex-col gap-4">
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-3">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <h1
                      className="text-3xl font-bold tracking-tight flex items-center gap-2 cursor-pointer hover:text-primary/80 transition-colors"
                      onClick={handleCopyId}
                    >
                      <Building className="h-8 w-8 text-primary" />
                      {listing.title}
                    </h1>
                  </TooltipTrigger>
                  <TooltipContent className="flex items-center gap-2">
                    <Copy className="h-3 w-3" />
                    <span>ID: {listing.id}</span>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>

          {listing.nickname && (
            <p className="text-lg text-muted-foreground font-medium">
              {listing.nickname}
            </p>
          )}

          {listing.address && (
            <div className="flex items-center gap-2 text-muted-foreground">
              <MapPin className="h-4 w-4" />
              <span>{listing.address}</span>
            </div>
          )}
        </div>

        {/* Main Content Grid */}
        <div className="grid gap-6 lg:grid-cols-2">
          {/* Left Column */}
          <div className="space-y-6">
            {/* Informations générales */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Home className="h-5 w-5" />
                  Informations générales
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Capacité:
                    </span>
                    <span className="font-medium">
                      {listing.accommodates} personnes
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Bed className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">Lits:</span>
                    <span className="font-medium">{listing.beds} lits</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Home className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Chambres:
                    </span>
                    <span className="font-medium">
                      {listing.bedrooms} chambres
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Bath className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Salles de bain:
                    </span>
                    <span className="font-medium">{listing.bathrooms}</span>
                  </div>
                </div>
                <Separator className="my-3" />
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Type de propriété:
                  </span>
                  <span className="font-medium">{listing.property_type}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Fuseau horaire:
                  </span>
                  <span className="font-medium">{listing.timezone}</span>
                </div>
              </CardContent>
            </Card>

            {/* Tarification */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Euro className="h-5 w-5" />
                  Tarification
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Prix de base:
                  </span>
                  <span className="font-semibold text-lg">
                    {formatPrice(
                      listing.prices.base_price,
                      listing.prices.currency
                    )}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Frais de ménage:
                  </span>
                  <span className="font-medium">
                    {formatPrice(
                      listing.prices.cleaning_fee,
                      listing.prices.currency
                    )}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Caution:
                  </span>
                  <span className="font-medium">
                    {formatPrice(
                      listing.prices.security_deposit_fee,
                      listing.prices.currency
                    )}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Frais personne supplémentaire:
                  </span>
                  <span className="font-medium">
                    {formatPrice(
                      listing.prices.extra_person_fee,
                      listing.prices.currency
                    )}
                  </span>
                </div>
                <Separator className="my-3" />
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Invités inclus:
                  </span>
                  <span className="font-medium">
                    {listing.prices.guests_included} personnes
                  </span>
                </div>
                {listing.prices.weekend_base_price && (
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground">
                      Prix week-end:
                    </span>
                    <span className="font-medium">
                      {formatPrice(
                        listing.prices.weekend_base_price,
                        listing.prices.currency
                      )}
                    </span>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Right Column */}
          <div className="space-y-6">
            {/* Instructions d'arrivée */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Key className="h-5 w-5" />
                  Instructions d&apos;arrivée
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Arrivée:
                    </span>
                    <span className="font-medium">
                      {listing.check_in_instructions.default_check_in_time}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Départ:
                    </span>
                    <span className="font-medium">
                      {listing.check_in_instructions.default_check_out_time}
                    </span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Méthode d&apos;accès:
                  </span>
                  <span className="font-medium">
                    {listing.check_in_instructions.primary_method}
                  </span>
                </div>
                {listing.check_in_instructions.notes && (
                  <>
                    <Separator />
                    <div className="space-y-2">
                      <span className="text-sm font-medium text-muted-foreground">
                        Instructions:
                      </span>
                      <blockquote className="border-l-4 border-primary/20 pl-4 italic text-sm bg-muted/50 p-3 rounded-r">
                        {listing.check_in_instructions.notes}
                      </blockquote>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>

            {/* Statut de nettoyage */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5" />
                  Statut de nettoyage
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Statut actuel:
                  </span>
                  {getCleaningStatusBadge(listing.cleaning_status.value)}
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Dernière mise à jour:
                  </span>
                  <span className="font-medium">
                    {formatDateTime(listing.cleaning_status.updated_at)}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* Informations système */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Informations système
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Créé le:
                  </span>
                  <span className="font-medium">
                    {formatDateTime(listing.created_at)}
                  </span>
                </div>
                {listing.last_updated_at && (
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground">
                      Modifié le:
                    </span>
                    <span className="font-medium">
                      {formatDateTime(listing.last_updated_at)}
                    </span>
                  </div>
                )}
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">
                    Dernière synchronisation:
                  </span>
                  <span className="font-medium">
                    {formatDateTime(listing.last_updated_timestamp)}
                  </span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Description publique */}
        {listing.public_description && (
          <Card className="overflow-hidden">
            <CardHeader
              className="cursor-pointer select-none hover:bg-muted/50 transition-colors"
              onClick={() => setIsDescriptionOpen(!isDescriptionOpen)}
            >
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  <span>Description de la propriété</span>
                </div>
                <div
                  className={`transition-transform duration-200 ${isDescriptionOpen ? 'rotate-180' : ''}`}
                >
                  <ChevronDown className="h-5 w-5 text-muted-foreground" />
                </div>
              </CardTitle>
            </CardHeader>
            {isDescriptionOpen && (
              <CardContent className="pt-0 pb-6">
                <div className="space-y-0">
                  {listing.public_description.summary && (
                    <div className="group">
                      <div className="py-4 px-4 -mx-4 hover:bg-muted/30 transition-colors rounded-lg">
                        <div className="flex items-start gap-3">
                          <FileText className="h-4 w-4 text-primary mt-0.5" />
                          <div className="flex-1">
                            <h3 className="font-medium text-sm mb-2 text-foreground">
                              Vue d&apos;ensemble
                            </h3>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {listing.public_description.summary}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.space && (
                    <div className="group">
                      <div className="py-4 px-4 -mx-4 hover:bg-muted/30 transition-colors rounded-lg">
                        <div className="flex items-start gap-3">
                          <Home className="h-4 w-4 text-primary mt-0.5" />
                          <div className="flex-1">
                            <h3 className="font-medium text-sm mb-2 text-foreground">
                              L&apos;espace
                            </h3>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {listing.public_description.space}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.neighborhood && (
                    <div className="group">
                      <div className="py-4 px-4 -mx-4 hover:bg-muted/30 transition-colors rounded-lg">
                        <div className="flex items-start gap-3">
                          <MapPinned className="h-4 w-4 text-primary mt-0.5" />
                          <div className="flex-1">
                            <h3 className="font-medium text-sm mb-2 text-foreground">
                              Le quartier
                            </h3>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {listing.public_description.neighborhood}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.access && (
                    <div className="group">
                      <div className="py-4 px-4 -mx-4 hover:bg-muted/30 transition-colors rounded-lg">
                        <div className="flex items-start gap-3">
                          <DoorOpen className="h-4 w-4 text-primary mt-0.5" />
                          <div className="flex-1">
                            <h3 className="font-medium text-sm mb-2 text-foreground">
                              Accès au logement
                            </h3>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {listing.public_description.access}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.transit && (
                    <div className="group">
                      <div className="py-4 px-4 -mx-4 hover:bg-muted/30 transition-colors rounded-lg">
                        <div className="flex items-start gap-3">
                          <Car className="h-4 w-4 text-primary mt-0.5" />
                          <div className="flex-1">
                            <h3 className="font-medium text-sm mb-2 text-foreground">
                              Transports et déplacements
                            </h3>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {listing.public_description.transit}
                            </p>
                          </div>
                        </div>
                      </div>
                      {listing.public_description.notes && (
                        <Separator className="my-2" />
                      )}
                    </div>
                  )}

                  {listing.public_description.notes && (
                    <div className="group">
                      <div className="py-4 px-4 -mx-4 hover:bg-muted/30 transition-colors rounded-lg">
                        <div className="flex items-start gap-3">
                          <StickyNote className="h-4 w-4 text-primary mt-0.5" />
                          <div className="flex-1">
                            <h3 className="font-medium text-sm mb-2 text-foreground">
                              Informations complémentaires
                            </h3>
                            <p className="text-sm text-muted-foreground leading-relaxed">
                              {listing.public_description.notes}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            )}
          </Card>
        )}
      </div>
    </DashboardLayout>
  );
}
