'use client';

import {
  AlertCircle,
  Building,
  ChevronDown,
  Clock,
  FileText,
  MapPinned,
  Car,
  DoorOpen,
  StickyNote,
  Key,
  Shield,
  Home,
} from 'lucide-react';
import { useParams } from 'next/navigation';
import { useState, useEffect } from 'react';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { formatDateTime } from '@/lib/format';
import { useLoadingStore } from '@/stores/loading-store';

import {
  DetailsSkeleton,
  ListingHeader,
  GeneralInfoCard,
  PricingCard,
  CleaningStatusCard,
} from './components';
import { useListingDetails } from './hooks/useListingDetails';

export default function ActifDetailsPage() {
  const params = useParams();
  const listingId = params.listingId as string;
  const { hideLoading } = useLoadingStore();

  const { listing, isLoading, error, refetch } = useListingDetails(listingId);
  const [isDescriptionOpen, setIsDescriptionOpen] = useState(true);
  useEffect(() => {
    if (!isLoading && !error) hideLoading();
  }, [isLoading, error, hideLoading]);

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Exploitation', href: '/home/exploitation' },
    { label: 'Actifs', href: '/home/exploitation/actifs' },
    { label: listing?.title ?? listing?.nickname ?? listingId },
  ];

  // Using centralized formatters from '@/lib/format'

  if (isLoading) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <DetailsSkeleton />
      </DashboardLayout>
    );
  }

  if (error) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col items-center justify-center py-12">
          <AlertCircle className="text-destructive mb-4 h-12 w-12" />
          <h2 className="mb-2 text-xl font-semibold">Erreur de chargement</h2>
          <p className="text-muted-foreground mb-4">{error}</p>
          <Button onClick={() => refetch()}>Réessayer</Button>
        </div>
      </DashboardLayout>
    );
  }

  if (!listing) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col items-center justify-center py-12">
          <Building className="text-muted-foreground mb-4 h-12 w-12" />
          <h2 className="mb-2 text-xl font-semibold">Listing non trouvé</h2>
          <p className="text-muted-foreground">
            Aucun listing trouvé avec cet identifiant.
          </p>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <ListingHeader listing={listing} />

        {/* Main Content Grid */}
        <div className="grid gap-6 lg:grid-cols-2">
          {/* Left Column */}
          <div className="space-y-6">
            <GeneralInfoCard listing={listing} />
            <PricingCard listing={listing} />
          </div>

          {/* Right Column */}
          <div className="space-y-6">
            {/* Instructions d'arrivée - uniquement si disponibles */}
            {listing.check_in_instructions && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Key className="h-5 w-5" />
                    Instructions d&apos;arrivée
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex items-center gap-2">
                      <Clock className="text-muted-foreground h-4 w-4" />
                      <span className="text-muted-foreground text-sm">
                        Arrivée:
                      </span>
                      <span className="font-medium">
                        {listing.check_in_instructions.default_check_in_time}
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="text-muted-foreground h-4 w-4" />
                      <span className="text-muted-foreground text-sm">
                        Départ:
                      </span>
                      <span className="font-medium">
                        {listing.check_in_instructions.default_check_out_time}
                      </span>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground text-sm">
                      Méthode d&apos;accès:
                    </span>
                    <span className="font-medium">
                      {listing.check_in_instructions.primary_method}
                    </span>
                  </div>
                  {listing.check_in_instructions.notes && (
                    <>
                      <Separator />
                      <div className="space-y-2">
                        <span className="text-muted-foreground text-sm font-medium">
                          Instructions:
                        </span>
                        <blockquote className="border-primary/20 bg-muted/50 rounded-r border-l-4 p-3 pl-4 text-sm italic">
                          {listing.check_in_instructions.notes}
                        </blockquote>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
            )}

            <CleaningStatusCard listing={listing} />

            {/* Informations système */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Informations système
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex items-center gap-2">
                  <span className="text-muted-foreground text-sm">
                    ID du listing:
                  </span>
                  <span className="font-mono text-xs font-medium">
                    {listing.id}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-muted-foreground text-sm">
                    Créé le:
                  </span>
                  <span className="font-medium">
                    {formatDateTime(listing.created_at)}
                  </span>
                </div>
                {listing.last_updated_at && (
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground text-sm">
                      Modifié le:
                    </span>
                    <span className="font-medium">
                      {formatDateTime(listing.last_updated_at)}
                    </span>
                  </div>
                )}
                {listing.last_updated_timestamp && (
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground text-sm">
                      Dernière synchronisation:
                    </span>
                    <span className="font-medium">
                      {formatDateTime(listing.last_updated_timestamp)}
                    </span>
                  </div>
                )}
                <div className="flex items-center gap-2">
                  <span className="text-muted-foreground text-sm">
                    Fuseau horaire:
                  </span>
                  <span className="font-medium">{listing.timezone}</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Description publique */}
        {listing.public_description && (
          <Card className="overflow-hidden">
            <CardHeader
              className="hover:bg-muted/50 cursor-pointer transition-colors select-none"
              onClick={() => setIsDescriptionOpen(!isDescriptionOpen)}
            >
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <FileText className="text-primary h-5 w-5" />
                  <span>Description de la propriété</span>
                </div>
                <div
                  className={`transition-transform duration-200 ${isDescriptionOpen ? 'rotate-180' : ''}`}
                >
                  <ChevronDown className="text-muted-foreground h-5 w-5" />
                </div>
              </CardTitle>
            </CardHeader>
            {isDescriptionOpen && (
              <CardContent className="pt-0 pb-6">
                <div className="space-y-0">
                  {listing.public_description.summary && (
                    <div className="group">
                      <div className="hover:bg-muted/30 -mx-4 rounded-lg px-4 py-4 transition-colors">
                        <div className="flex items-start gap-3">
                          <FileText className="text-primary mt-0.5 h-4 w-4" />
                          <div className="flex-1">
                            <h3 className="text-foreground mb-2 text-sm font-medium">
                              Vue d&apos;ensemble
                            </h3>
                            <p className="text-muted-foreground text-sm leading-relaxed">
                              {listing.public_description.summary}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.space && (
                    <div className="group">
                      <div className="hover:bg-muted/30 -mx-4 rounded-lg px-4 py-4 transition-colors">
                        <div className="flex items-start gap-3">
                          <Home className="text-primary mt-0.5 h-4 w-4" />
                          <div className="flex-1">
                            <h3 className="text-foreground mb-2 text-sm font-medium">
                              L&apos;espace
                            </h3>
                            <p className="text-muted-foreground text-sm leading-relaxed">
                              {listing.public_description.space}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.neighborhood && (
                    <div className="group">
                      <div className="hover:bg-muted/30 -mx-4 rounded-lg px-4 py-4 transition-colors">
                        <div className="flex items-start gap-3">
                          <MapPinned className="text-primary mt-0.5 h-4 w-4" />
                          <div className="flex-1">
                            <h3 className="text-foreground mb-2 text-sm font-medium">
                              Le quartier
                            </h3>
                            <p className="text-muted-foreground text-sm leading-relaxed">
                              {listing.public_description.neighborhood}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.access && (
                    <div className="group">
                      <div className="hover:bg-muted/30 -mx-4 rounded-lg px-4 py-4 transition-colors">
                        <div className="flex items-start gap-3">
                          <DoorOpen className="text-primary mt-0.5 h-4 w-4" />
                          <div className="flex-1">
                            <h3 className="text-foreground mb-2 text-sm font-medium">
                              Accès au logement
                            </h3>
                            <p className="text-muted-foreground text-sm leading-relaxed">
                              {listing.public_description.access}
                            </p>
                          </div>
                        </div>
                      </div>
                      <Separator className="my-2" />
                    </div>
                  )}

                  {listing.public_description.transit && (
                    <div className="group">
                      <div className="hover:bg-muted/30 -mx-4 rounded-lg px-4 py-4 transition-colors">
                        <div className="flex items-start gap-3">
                          <Car className="text-primary mt-0.5 h-4 w-4" />
                          <div className="flex-1">
                            <h3 className="text-foreground mb-2 text-sm font-medium">
                              Transports et déplacements
                            </h3>
                            <p className="text-muted-foreground text-sm leading-relaxed">
                              {listing.public_description.transit}
                            </p>
                          </div>
                        </div>
                      </div>
                      {listing.public_description.notes && (
                        <Separator className="my-2" />
                      )}
                    </div>
                  )}

                  {listing.public_description.notes && (
                    <div className="group">
                      <div className="hover:bg-muted/30 -mx-4 rounded-lg px-4 py-4 transition-colors">
                        <div className="flex items-start gap-3">
                          <StickyNote className="text-primary mt-0.5 h-4 w-4" />
                          <div className="flex-1">
                            <h3 className="text-foreground mb-2 text-sm font-medium">
                              Informations complémentaires
                            </h3>
                            <p className="text-muted-foreground text-sm leading-relaxed">
                              {listing.public_description.notes}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            )}
          </Card>
        )}
      </div>
    </DashboardLayout>
  );
}
