/**
 * Composant de filtres pour les actifs
 * Gère la recherche et les filtres avancés
 */

'use client';

import { Search, RefreshCw } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

import { TYPES_LOGEMENT, ORDER_BY_OPTIONS, PAGE_SIZES } from '../config';
import type { FiltersProps } from '../types';

//

/**
 * Composant de filtres pour la liste des actifs
 */
export function ActifsFilters({
  filters,
  onFiltersChange,
  onSearch,
  onReset,
  isLoading = false,
  sites = [],
}: FiltersProps) {
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg font-semibold">
            Filtres de recherche
          </CardTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={onReset}
            disabled={isLoading}
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Réinitialiser
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Barre de recherche principale */}
        <div className="flex gap-2">
          <div className="relative flex-1">
            <Search className="text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
            <Input
              placeholder="Rechercher par nom, code ou adresse..."
              value={filters.search ?? ''}
              onChange={e => onFiltersChange({ search: e.target.value })}
              onKeyDown={e => e.key === 'Enter' && onSearch()}
              className="pl-9"
              disabled={isLoading}
            />
          </div>
          <Button onClick={onSearch} disabled={isLoading}>
            <Search className="mr-2 h-4 w-4" />
            Rechercher
          </Button>
        </div>

        {/* Filtres principaux en ligne */}
        <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
          {/* Site */}
          <div className="space-y-2">
            <Label htmlFor="site">Site</Label>
            <Select
              value={filters.code_site ?? 'all'}
              onValueChange={value =>
                onFiltersChange({
                  code_site: value === 'all' ? undefined : value,
                })
              }
              disabled={isLoading}
            >
              <SelectTrigger id="site">
                <SelectValue placeholder="Tous les sites" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Tous les sites</SelectItem>
                {sites.map(site => (
                  <SelectItem key={site.value} value={site.value}>
                    {site.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Type de logement */}
          <div className="space-y-2">
            <Label htmlFor="type">Type de logement</Label>
            <Select
              value={filters.type_logement ?? 'all'}
              onValueChange={value =>
                onFiltersChange({
                  type_logement: value === 'all' ? undefined : value,
                })
              }
              disabled={isLoading}
            >
              <SelectTrigger id="type">
                <SelectValue placeholder="Tous les types" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Tous les types</SelectItem>
                {TYPES_LOGEMENT.map(type => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Tri */}
          <div className="space-y-2">
            <Label htmlFor="sort">Trier par</Label>
            <Select
              value={filters.order_by ?? 'listing_complet'}
              onValueChange={value => onFiltersChange({ order_by: value })}
              disabled={isLoading}
            >
              <SelectTrigger id="sort">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {ORDER_BY_OPTIONS.map(option => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Pagination */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Label htmlFor="pageSize">Afficher</Label>
            <Select
              value={String(filters.limit ?? 20)}
              onValueChange={value =>
                onFiltersChange({ limit: parseInt(value, 10), offset: 0 })
              }
              disabled={isLoading}
            >
              <SelectTrigger id="pageSize" className="w-[140px]">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {PAGE_SIZES.map(size => (
                  <SelectItem key={size.value} value={size.value}>
                    {size.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center gap-2">
            <Button
              variant={
                filters.order_direction === 'ASC' ? 'default' : 'outline'
              }
              size="sm"
              onClick={() => onFiltersChange({ order_direction: 'ASC' })}
              disabled={isLoading}
            >
              Croissant
            </Button>
            <Button
              variant={
                filters.order_direction === 'DESC' ? 'default' : 'outline'
              }
              size="sm"
              onClick={() => onFiltersChange({ order_direction: 'DESC' })}
              disabled={isLoading}
            >
              Décroissant
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
