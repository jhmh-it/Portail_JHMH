'use client';

import { Building, Calendar } from 'lucide-react';
import { useRouter } from 'next/navigation';

import { Button } from '@/components/ui/button';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { useLoadingStore } from '@/stores/loading-store';
import type { Actif, ActifsFilters, ActifsResponse } from '@/types/actifs';

import { PAGINATION_CONFIG } from '../constants';
import {
  formatDate,
  formatSuperficie,
  generatePaginationItems,
} from '../utils';

interface ActifsTableProps {
  data: ActifsResponse | undefined;
  isLoading: boolean;
  isFetching: boolean;
  error: Error | null;
  filters: ActifsFilters;
  onPageChange: (page: number) => void;
}

export function ActifsTable({
  data,
  isLoading,
  isFetching,
  error,
  filters,
  onPageChange,
}: ActifsTableProps) {
  const router = useRouter();
  const { showLoading } = useLoadingStore();

  const handleRowClick = (actif: Actif) => {
    showLoading();
    router.push(`/home/exploitation/actifs/${actif.id_opening}`);
  };

  // Calcul de la pagination
  const currentPage = filters.page ?? 1;
  const pageSize = filters.page_size ?? PAGINATION_CONFIG.DEFAULT_PAGE_SIZE;
  const totalItems = data?.total ?? 0;
  const totalPages = Math.ceil(totalItems / pageSize);
  const paginationItems = generatePaginationItems(currentPage, totalPages);

  // Loading skeleton
  if (isLoading) {
    return (
      <div className="space-y-4">
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Listing</TableHead>
                <TableHead className="text-center">Superficie</TableHead>
                <TableHead>Date d&apos;ouverture</TableHead>
                <TableHead>N° Mairie</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {[...Array(pageSize)].map((_, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <Skeleton className="h-4 w-48" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-4 w-16" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-4 w-20" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-4 w-24" />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        <div className="flex justify-center">
          <Skeleton className="h-10 w-32" />
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <div className="text-red-500 mb-4">
          <Building className="h-12 w-12 mx-auto" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Erreur de chargement
        </h3>
        <p className="text-gray-500 mb-4">
          {error.message || 'Impossible de charger les actifs'}
        </p>
        <Button variant="outline" onClick={() => window.location.reload()}>
          Réessayer
        </Button>
      </div>
    );
  }

  // Empty state
  if (!data?.actifs || data.actifs.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <Building className="h-12 w-12 text-gray-400 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Aucun actif trouvé
        </h3>
        <p className="text-gray-500">
          Aucun actif ne correspond aux critères de recherche actuels.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Table */}
      <div className="rounded-md border overflow-visible pb-2">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="font-medium">Listing</TableHead>
              <TableHead className="font-medium text-center">
                Superficie
              </TableHead>
              <TableHead className="font-medium">
                Date d&apos;ouverture
              </TableHead>
              <TableHead className="font-medium">N° Mairie</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody className="relative">
            {data.actifs.map((actif: Actif) => (
              <TableRow
                key={actif.id_opening}
                className={`cursor-pointer relative transition-all duration-200 hover:bg-muted/50 hover:shadow-lg hover:shadow-primary/15 hover:border-primary/30 hover:z-10 ${isFetching ? 'opacity-50' : ''}`}
                onClick={() => handleRowClick(actif)}
              >
                <TableCell>
                  <div className="flex flex-col">
                    <span className="font-medium text-foreground">
                      {actif.listing_complet}
                    </span>
                    <span className="text-xs text-muted-foreground">
                      ID: {actif.id_opening}
                    </span>
                  </div>
                </TableCell>
                <TableCell className="text-center">
                  {formatSuperficie(actif.superficie_m2)}
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-1 text-sm">
                    <Calendar className="h-3 w-3 text-muted-foreground" />
                    {formatDate(actif.date_ouverture)}
                  </div>
                </TableCell>
                <TableCell className="font-mono text-sm">
                  {actif.numero_mairie || '-'}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex flex-col gap-4 items-center">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious
                  onClick={() =>
                    currentPage > 1 && onPageChange(currentPage - 1)
                  }
                  className={
                    currentPage === 1
                      ? 'pointer-events-none opacity-50'
                      : 'cursor-pointer'
                  }
                />
              </PaginationItem>

              {paginationItems.map((item, index) => (
                <PaginationItem key={index}>
                  {typeof item === 'number' ? (
                    <PaginationLink
                      onClick={() => onPageChange(item)}
                      isActive={currentPage === item}
                      className="cursor-pointer"
                    >
                      {item}
                    </PaginationLink>
                  ) : (
                    <PaginationEllipsis />
                  )}
                </PaginationItem>
              ))}

              <PaginationItem>
                <PaginationNext
                  onClick={() =>
                    currentPage < totalPages && onPageChange(currentPage + 1)
                  }
                  className={
                    currentPage === totalPages
                      ? 'pointer-events-none opacity-50'
                      : 'cursor-pointer'
                  }
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  );
}
