/**
 * Hook pour gérer les filtres et la pagination des actifs
 */

'use client';

import { useSearchParams, useRouter } from 'next/navigation';
import { useCallback, useState, useEffect } from 'react';

import { DEFAULT_FILTERS } from '../config';
import type { ActifsFilters } from '../types';

/**
 * Hook pour gérer les filtres des actifs
 * Synchronise avec l'URL pour permettre le partage de liens
 */
export function useActifsFilters() {
  const router = useRouter();
  const searchParams = useSearchParams();

  // Initialiser les filtres depuis l'URL ou les valeurs par défaut
  const getInitialFilters = (): ActifsFilters => {
    const params: ActifsFilters = { ...DEFAULT_FILTERS };

    // Récupérer les valeurs depuis l'URL
    const search = searchParams.get('search');
    const codeSite = searchParams.get('code_site');
    const typeLogement = searchParams.get('type_logement');
    const limit = searchParams.get('limit');
    const offset = searchParams.get('offset');
    const orderBy = searchParams.get('order_by');
    const orderDirection = searchParams.get('order_direction');

    if (search) params.search = search;
    if (codeSite) params.code_site = codeSite;
    if (typeLogement) params.type_logement = typeLogement;
    if (limit) params.limit = parseInt(limit, 10);
    if (offset) params.offset = parseInt(offset, 10);
    if (orderBy) params.order_by = orderBy;
    if (orderDirection)
      params.order_direction = orderDirection as 'ASC' | 'DESC';

    return params;
  };

  const [filters, setFiltersState] = useState<ActifsFilters>(getInitialFilters);
  const [searchQuery, setSearchQuery] = useState(filters.search ?? '');
  const [showFilters, setShowFilters] = useState(true);
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

  /**
   * Met à jour les filtres
   */
  const updateFilters = useCallback((newFilters: Partial<ActifsFilters>) => {
    setFiltersState(prev => ({ ...prev, ...newFilters }));
  }, []);

  /**
   * Synchronise les filtres avec l'URL
   */
  useEffect(() => {
    const params = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== null && value !== undefined && value !== '') {
        params.set(key, String(value));
      }
    });

    const queryString = params.toString();
    const newUrl = queryString ? `?${queryString}` : window.location.pathname;

    // Utiliser router.replace pour ne pas ajouter à l'historique
    router.replace(newUrl, { scroll: false });
  }, [filters, router]);

  /**
   * Gère le changement de page
   */
  const handlePageChange = useCallback(
    (page: number) => {
      const newOffset = (page - 1) * (filters.limit ?? DEFAULT_FILTERS.limit);
      updateFilters({ offset: newOffset });
    },
    [filters.limit, updateFilters]
  );

  /**
   * Gère la recherche
   */
  const handleSearch = useCallback(() => {
    updateFilters({
      search: searchQuery,
      offset: 0, // Reset to first page on search
    });
  }, [searchQuery, updateFilters]);

  /**
   * Réinitialise les filtres
   */
  const handleReset = useCallback(() => {
    setFiltersState(DEFAULT_FILTERS);
    setSearchQuery('');
    setShowAdvancedFilters(false);
    router.replace(window.location.pathname, { scroll: false });
  }, [router]);

  /**
   * Gère le changement de la requête de recherche
   */
  const handleSearchChange = useCallback((value: string) => {
    setSearchQuery(value);
  }, []);

  /**
   * Calcule la page actuelle
   */
  const currentPage =
    Math.floor(
      (filters.offset ?? 0) / (filters.limit ?? DEFAULT_FILTERS.limit)
    ) + 1;

  return {
    // États
    filters,
    searchQuery,
    showFilters,
    showAdvancedFilters,
    currentPage,

    // Actions
    updateFilters,
    handlePageChange,
    handleSearch,
    handleReset,
    handleSearchChange,
    setShowFilters,
    setShowAdvancedFilters,
  };
}
