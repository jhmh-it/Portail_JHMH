/**
 * Page Actifs - Architecture modulaire et professionnelle
 * Gestion des biens immobiliers avec filtrage avancé
 */

'use client';

import { Suspense, useMemo } from 'react';

import { DashboardLayout } from '@/components/dashboard';
import { ErrorVariants, NoDataVariants } from '@/components/states';
import { useNavigation } from '@/hooks/useNavigation';

import {
  ActifsTable,
  ActifsTableSkeleton,
  ActifsFilters,
  AdvancedFilters,
  ActifsHeader,
  ActifsPageSkeleton,
} from './components';
import { BREADCRUMBS } from './config';
import { useActifs, useActifsFilters } from './hooks';

/**
 * Page principale de gestion des actifs immobiliers
 * Architecture feature-based avec séparation des responsabilités
 */
export default function ActifsPage() {
  return (
    <DashboardLayout breadcrumbs={[...BREADCRUMBS.ACTIFS]}>
      <Suspense fallback={<ActifsPageSkeleton />}>
        <ActifsContent />
      </Suspense>
    </DashboardLayout>
  );
}

function ActifsContent() {
  const { navigateWithLoading } = useNavigation();

  // Gestion des filtres et de la pagination
  const {
    filters,
    searchQuery,
    showFilters,
    showAdvancedFilters,
    currentPage,
    updateFilters,
    handlePageChange,
    handleSearch,
    handleReset,
    handleSearchChange,
    setShowFilters: _setShowFilters,
    setShowAdvancedFilters,
  } = useActifsFilters();

  // Récupération des données
  const { actifs: data, isLoading, error, refetch } = useActifs(filters);

  // Récupération de la liste des sites pour le filtre
  const { actifs: allActifs } = useActifs();

  // Extraire la liste unique des sites
  const sitesList = useMemo(() => {
    if (!allActifs || allActifs.length === 0) return [];

    const uniqueSites = new Set<string>();
    allActifs.forEach(actif => {
      if (actif.code_site) {
        uniqueSites.add(actif.code_site);
      }
    });

    return Array.from(uniqueSites)
      .sort()
      .map(site => ({
        value: site,
        label: site,
      }));
  }, [allActifs]);

  // Navigation vers le détail d'un actif (avec loader)
  interface ClickableActif {
    id_opening: string;
  }
  const handleRowClick = async (actif: ClickableActif) => {
    await navigateWithLoading(`/home/exploitation/actifs/${actif.id_opening}`, {
      loadingTitle: 'Chargement du listing',
      loadingDescription: `Ouverture de l\'actif ${actif?.id_opening ?? ''}...`,
      delay: 0,
    });
  };

  // Calcul du total et de la pagination
  const total = data?.length ?? 0;
  const pageSize = filters.limit ?? 20;

  return (
    <div className="flex flex-col gap-6 py-6">
      {/* Header spécifique + stats */}
      <ActifsHeader totalCount={total} isLoading={isLoading} />

      {/* Section des filtres */}
      {showFilters && (
        <div className="space-y-4">
          <ActifsFilters
            filters={{
              ...filters,
              search: searchQuery,
            }}
            onFiltersChange={newFilters => {
              if ('search' in newFilters) {
                handleSearchChange(newFilters.search ?? '');
              } else {
                updateFilters(newFilters);
              }
            }}
            onSearch={handleSearch}
            onReset={handleReset}
            isLoading={isLoading}
            sites={sitesList}
          />

          {/* Filtres avancés */}
          <AdvancedFilters
            filters={filters}
            onFiltersChange={updateFilters}
            isOpen={showAdvancedFilters}
            onToggle={() => setShowAdvancedFilters(!showAdvancedFilters)}
            disabled={isLoading}
          />
        </div>
      )}

      {/* Section principale avec gestion des états */}
      <main>
        {(() => {
          // État chargement
          if (isLoading) {
            return (
              <>
                <ActifsPageSkeleton />
                <ActifsTableSkeleton rows={pageSize} />
              </>
            );
          }

          // État d'erreur
          if (error) {
            return (
              <ErrorVariants.Card
                error={error}
                onRetry={refetch}
                title="Erreur lors du chargement des actifs"
              />
            );
          }

          // État vide
          if (!isLoading && data && data.length === 0) {
            return (
              <NoDataVariants.Empty
                message="Aucun actif trouvé"
                description="Modifiez vos critères de recherche ou réinitialisez les filtres pour voir plus de résultats."
                variant="card"
              />
            );
          }

          // État de succès avec données
          return (
            <ActifsTable
              actifs={data || []}
              isLoading={isLoading}
              currentPage={currentPage}
              pageSize={pageSize}
              total={total}
              onPageChange={handlePageChange}
              onRowClick={handleRowClick}
            />
          );
        })()}
      </main>
    </div>
  );
}
