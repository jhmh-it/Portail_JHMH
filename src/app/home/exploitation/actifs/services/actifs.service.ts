/**
 * Service sp√©cifique √† la page Actifs
 * Co-located avec les composants qui l'utilisent pour une meilleure maintenabilit√©
 */

import { jhmhApiClient, ERROR_MESSAGES } from '@/lib/jhmh-api';

// ==========================================
// üìÑ TYPES SP√âCIFIQUES AUX ACTIFS
// ==========================================

/**
 * Structure d'un listing actif externe (API JHMH)
 */
export interface ExternalListingActif {
  code_site: string;
  date_ouverture: string;
  id_opening: string;
  listing_complet: string;
  numero_mairie: string;
  superficie_m2: number | null;
  type_logement: string;
}

/**
 * Filtres pour la recherche de listings actifs
 */
export interface ListingActifFilters {
  limit?: number;
  offset?: number;
  code_site?: string;
  type_logement?: string;
  order_by?: string;
  order_direction?: string;
  q?: string;
  superficie_min?: number;
  superficie_max?: number;
  date_ouverture_from?: string;
  date_ouverture_to?: string;
}

/**
 * R√©ponse du service listings actifs
 */
export interface ListingsServiceResponse {
  success: boolean;
  data: ExternalListingActif[];
  total: number;
  error?: string;
}

// ==========================================
// üîß SERVICE LISTINGS ACTIFS
// ==========================================

/**
 * R√©cup√®re les listings actifs depuis l'API JHMH
 * Service co-located avec la page actifs
 */
export async function fetchJhmhListingsActifs(
  params?: ListingActifFilters
): Promise<ListingsServiceResponse> {
  try {
    const queryParams = new URLSearchParams();

    // Note: On ne passe plus limit/offset √† l'API externe
    // On r√©cup√®re tout et on pagine c√¥t√© client

    // Filtres de base
    if (params?.code_site) queryParams.append('code_site', params.code_site);
    if (params?.type_logement)
      queryParams.append('type_logement', params.type_logement);
    if (params?.order_by) queryParams.append('order_by', params.order_by);
    if (params?.order_direction)
      queryParams.append('order_direction', params.order_direction);

    // Filtres suppl√©mentaires (si l'API les supporte)
    if (params?.q) queryParams.append('q', params.q);
    if (params?.superficie_min)
      queryParams.append('superficie_min', params.superficie_min.toString());
    if (params?.superficie_max)
      queryParams.append('superficie_max', params.superficie_max.toString());
    if (params?.date_ouverture_from)
      queryParams.append('date_ouverture_from', params.date_ouverture_from);
    if (params?.date_ouverture_to)
      queryParams.append('date_ouverture_to', params.date_ouverture_to);

    const queryString = queryParams.toString();
    const url = `/api/assets/listings-actifs${queryString ? `?${queryString}` : ''}`;

    const response = await jhmhApiClient.get<ExternalListingActif[]>(url);

    // R√©cup√©rer tous les actifs, le total r√©el est la longueur compl√®te
    return {
      success: true,
      data: response.data ?? [],
      total: response.data?.length ?? 0,
    };
  } catch (error) {
    console.error('Error fetching JHMH listings actifs:', error);

    return {
      success: false,
      data: [],
      total: 0,
      error: error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN,
    };
  }
}
