/**
 * Service pour la gestion des listings actifs JHMH
 */

import { jhmhApiClient, ERROR_MESSAGES } from '@/lib/jhmh-api';

import type {
  ExternalListingActif,
  ListingActifFilters,
  ListingsServiceResponse,
} from './listings.types';

export type {
  ExternalListingActif,
  ListingActifFilters,
  ListingsServiceResponse,
};

/**
 * Récupère les listings actifs depuis l'API JHMH
 */
export async function fetchJhmhListingsActifs(
  params?: ListingActifFilters
): Promise<ListingsServiceResponse> {
  try {
    const queryParams = new URLSearchParams();

    // Note: On ne passe plus limit/offset à l'API externe
    // On récupère tout et on pagine côté client

    // Filtres de base
    if (params?.code_site) queryParams.append('code_site', params.code_site);
    if (params?.type_logement)
      queryParams.append('type_logement', params.type_logement);
    if (params?.order_by) queryParams.append('order_by', params.order_by);
    if (params?.order_direction)
      queryParams.append('order_direction', params.order_direction);

    // Filtres supplémentaires (si l'API les supporte)
    if (params?.q) queryParams.append('q', params.q);
    if (params?.superficie_min)
      queryParams.append('superficie_min', params.superficie_min.toString());
    if (params?.superficie_max)
      queryParams.append('superficie_max', params.superficie_max.toString());
    if (params?.date_ouverture_from)
      queryParams.append('date_ouverture_from', params.date_ouverture_from);
    if (params?.date_ouverture_to)
      queryParams.append('date_ouverture_to', params.date_ouverture_to);

    const queryString = queryParams.toString();
    const url = `/api/assets/listings-actifs${queryString ? `?${queryString}` : ''}`;

    const response = await jhmhApiClient.get<ExternalListingActif[]>(url);

    // Récupérer tous les actifs, le total réel est la longueur complète
    return {
      success: true,
      data: response.data ?? [],
      total: response.data?.length ?? 0,
    };
  } catch (error) {
    console.error('Error fetching JHMH listings actifs:', error);

    return {
      success: false,
      data: [],
      total: 0,
      error: error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN,
    };
  }
}

/**
 * Récupère un listing spécifique par son ID (données simplifiées)
 */
export async function fetchJhmhListingById(
  listingId: string
): Promise<ListingsServiceResponse> {
  try {
    // Récupérer tous les listings et filtrer par ID
    const allListings = await fetchJhmhListingsActifs();

    if (!allListings.success) {
      return {
        success: false,
        data: [],
        total: 0,
        error:
          allListings.error ?? 'Erreur lors de la récupération des listings',
      };
    }

    // Filtrer par ID
    const foundListing = allListings.data.find(
      listing => listing.id_opening === listingId
    );

    if (!foundListing) {
      return {
        success: false,
        data: [],
        total: 0,
        error: 'Listing non trouvé',
      };
    }

    return {
      success: true,
      data: [foundListing],
      total: 1,
    };
  } catch (error) {
    console.error('Error fetching JHMH listing by ID:', error);

    return {
      success: false,
      data: [],
      total: 0,
      error: error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN,
    };
  }
}

/**
 * Récupère un listing avec tous les détails depuis l'API guestymirror
 */
export async function fetchJhmhListingDetailsById(
  listingId: string
): Promise<
  | { success: true; data: Record<string, unknown> }
  | { success: false; data: null; error: string }
> {
  try {
    const url = `/api/guestymirror/listings?listing_id=${listingId}`;
    const response = await jhmhApiClient.get(url);

    if (!response.data?.data || response.data.data.length === 0) {
      return {
        success: false,
        data: null,
        error: 'Listing non trouvé',
      };
    }

    return {
      success: true,
      data: response.data.data[0] as Record<string, unknown>,
    };
  } catch (error) {
    console.error('Error fetching JHMH listing details by ID:', error);

    return {
      success: false,
      data: null,
      error: error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN,
    };
  }
}
