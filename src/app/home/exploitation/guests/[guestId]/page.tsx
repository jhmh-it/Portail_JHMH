/**
 * Guest Details Page - Refactored with proper architecture
 * Uses feature-based components and hooks for clean separation of concerns
 */

'use client';

import { useParams } from 'next/navigation';
import { useEffect } from 'react';

// External imports
import { DashboardLayout } from '@/components/dashboard';
import { ErrorVariants } from '@/components/states';
import { useLoadingStore } from '@/stores/loading-store';

// Internal imports - hooks and config
import { BREADCRUMBS } from '../config';
import { useGuestDetails } from '../hooks';
import { formatGuestName } from '../lib';

// Internal imports - page-specific components
import {
  GuestHeader,
  PersonalInfo,
  NotesCard,
  SystemInfo,
  GuestDetailsSkeleton,
} from './components';
import { formatDate, formatDateTime } from './lib';

/**
 * Guest Details Page Component
 * Displays detailed information about a specific guest
 */
export default function GuestDetailsPage() {
  const params = useParams();
  const guestId = params.guestId as string;
  const { hideLoading } = useLoadingStore();

  // Use the centralized hook for data fetching
  const { guest, isLoading, error } = useGuestDetails(guestId);

  // Hide global loading when page loads successfully
  useEffect(() => {
    if (!isLoading && !error) {
      hideLoading();
    }
  }, [isLoading, error, hideLoading]);

  // Generate breadcrumbs
  const breadcrumbs = BREADCRUMBS.GUEST_DETAILS(
    guest ? formatGuestName(guest) : undefined
  );

  // Loading state - using professional skeleton matching page structure
  if (isLoading) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <GuestDetailsSkeleton />
      </DashboardLayout>
    );
  }

  // Error state - using global error component
  if (error) {
    const isNotFound =
      error.message?.includes('404') || error.message?.includes('non trouvé');

    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="container mx-auto py-6">
          <ErrorVariants.Card
            error={error}
            title={
              isNotFound
                ? 'Guest introuvable'
                : 'Erreur lors du chargement des détails du guest'
            }
            onRetry={() => window.location.reload()}
          />
        </div>
      </DashboardLayout>
    );
  }

  // No data state - should rarely happen with proper API
  if (!guest) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="container mx-auto py-6">
          <ErrorVariants.Card
            error={new Error('Guest non trouvé')}
            title="Guest introuvable"
            onRetry={() => window.location.reload()}
          />
        </div>
      </DashboardLayout>
    );
  }

  // Success state with data - render full guest details
  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="container mx-auto py-6">
        {/* Header Section - Guest name, contact, and status */}
        <div className="flex flex-col gap-6">
          <GuestHeader guest={guest} />
        </div>

        {/* Main Content Grid - Personal info, notes, system info */}
        <div className="mt-6 grid gap-6">
          {/* Personal Information Card */}
          <PersonalInfo guest={guest} formatDate={formatDate} />

          {/* Notes Card - conditionally rendered if notes exist */}
          <NotesCard notes={guest.notes} />

          {/* System Information Card - creation and update timestamps */}
          <SystemInfo guest={guest} formatDateTime={formatDateTime} />
        </div>
      </div>
    </DashboardLayout>
  );
}
