'use client';

import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import {
  User,
  Mail,
  Phone,
  StickyNote,
  UserCheck,
  AlertCircle,
  WifiOff,
  Clock,
  Copy,
} from 'lucide-react';
import { useParams } from 'next/navigation';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { useLoadingStore } from '@/stores/loading-store';
import type { Guest } from '@/types/guest';

export default function GuestDetailsPage() {
  const params = useParams();
  const guestId = params.guestId as string;
  const { hideLoading } = useLoadingStore();

  const [guest, setGuest] = useState<Guest | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchGuestDetails = async () => {
      try {
        setIsLoading(true);
        setError(null);

        const response = await fetch(`/api/guests?guest_id=${guestId}`);

        if (!response.ok) {
          throw new Error('Impossible de récupérer les détails du guest');
        }

        const result = await response.json();

        if (result.success && result.data && result.data.length > 0) {
          setGuest(result.data[0]);
        } else {
          throw new Error('Guest non trouvé');
        }
      } catch (err) {
        console.error('Erreur lors du chargement des détails:', err);
        setError(
          err instanceof Error ? err.message : 'Une erreur est survenue'
        );
      } finally {
        setIsLoading(false);
        hideLoading();
      }
    };

    if (guestId) {
      fetchGuestDetails();
    }
  }, [guestId, hideLoading]);

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Exploitation Information', href: '/home/exploitation' },
    { label: 'Guests', href: '/home/exploitation/guests' },
    { label: guest?.full_name ?? guestId },
  ];

  const formatDate = (dateString: string | null): string => {
    if (!dateString) return '-';
    try {
      return format(new Date(dateString), 'dd MMMM yyyy', { locale: fr });
    } catch {
      return '-';
    }
  };

  const formatDateTime = (dateString: string | null): string => {
    if (!dateString) return '-';
    try {
      return format(new Date(dateString), 'dd MMM yyyy à HH:mm', {
        locale: fr,
      });
    } catch {
      return '-';
    }
  };

  const formatPhone = (phone: string | null): string => {
    if (!phone) return '-';
    return phone.replace(
      /(\d{3})(\d{2})(\d{2})(\d{2})(\d{2})/,
      '$1 $2 $3 $4 $5'
    );
  };

  const handleCopyId = () => {
    if (guest) {
      navigator.clipboard.writeText(guest.id);
      toast.success('ID copié dans le presse-papier', {
        style: { color: 'green' },
        icon: '✓',
      });
    }
  };

  // Loading state
  if (isLoading) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="container mx-auto py-6">
          <div className="flex flex-col gap-6">
            <div className="flex flex-col gap-4">
              <Skeleton className="h-10 w-64" />
              <Skeleton className="h-5 w-96" />
            </div>
            <div className="grid gap-6 lg:grid-cols-2">
              <Skeleton className="h-64" />
              <Skeleton className="h-64" />
              <Skeleton className="h-48 lg:col-span-2" />
            </div>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Error state
  if (error) {
    const isNotFound = error === 'Guest non trouvé';
    const hasNetworkError =
      error.includes('Network') || error.includes('fetch');

    let errorContent;

    if (hasNetworkError) {
      errorContent = (
        <>
          <div className="rounded-full bg-destructive/10 p-4">
            <WifiOff className="h-12 w-12 text-destructive" />
          </div>
          <h2 className="text-2xl font-semibold">Erreur de connexion</h2>
          <p className="text-muted-foreground">
            Impossible de se connecter au serveur. Vérifiez votre connexion
            internet et réessayez.
          </p>
        </>
      );
    } else if (isNotFound) {
      errorContent = (
        <>
          <div className="rounded-full bg-muted p-4">
            <AlertCircle className="h-12 w-12 text-muted-foreground" />
          </div>
          <h2 className="text-2xl font-semibold">Guest introuvable</h2>
          <p className="text-muted-foreground">
            Le guest avec l&apos;ID <strong>{guestId}</strong> n&apos;existe pas
            ou a été supprimé.
          </p>
        </>
      );
    } else {
      errorContent = (
        <>
          <div className="rounded-full bg-destructive/10 p-4">
            <AlertCircle className="h-12 w-12 text-destructive" />
          </div>
          <h2 className="text-2xl font-semibold">Une erreur est survenue</h2>
          <p className="text-muted-foreground">{error}</p>
        </>
      );
    }

    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col items-center justify-center min-h-[60vh] gap-6 p-8">
          <div className="flex flex-col items-center gap-4 max-w-md text-center">
            {errorContent}
            <Button onClick={() => window.location.reload()} className="mt-4">
              Réessayer
            </Button>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Success state with data
  if (!guest) return null;

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="container mx-auto py-6">
        {/* Header */}
        <div className="flex flex-col gap-6">
          <div className="flex flex-col gap-3">
            <div className="flex items-center gap-3 flex-wrap">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <h1
                      className="text-3xl font-bold tracking-tight flex items-center gap-2 cursor-pointer hover:text-primary/80 transition-colors"
                      onClick={handleCopyId}
                    >
                      <User className="h-8 w-8 text-primary" />
                      {guest.full_name ??
                        `${guest.first_name ?? ''} ${guest.last_name ?? ''}`.trim() ??
                        'Guest'}
                    </h1>
                  </TooltipTrigger>
                  <TooltipContent className="flex items-center gap-2">
                    <Copy className="h-3 w-3" />
                    <span>ID: {guest.id}</span>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
              <Badge
                variant={guest.is_returning ? 'default' : 'secondary'}
                className="text-sm"
              >
                {guest.is_returning ? 'Client récurrent' : 'Nouveau client'}
              </Badge>
            </div>

            {/* Key info bar */}
            <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground">
              {guest.email && (
                <div className="flex items-center gap-1">
                  <Mail className="h-3.5 w-3.5" />
                  <a
                    href={`mailto:${guest.email}`}
                    className="text-primary hover:underline"
                  >
                    {guest.email}
                  </a>
                </div>
              )}
              {guest.phone && (
                <div className="flex items-center gap-1">
                  <Phone className="h-3.5 w-3.5" />
                  <a
                    href={`tel:${guest.phone}`}
                    className="text-primary hover:underline"
                  >
                    {formatPhone(guest.phone)}
                  </a>
                </div>
              )}
            </div>
          </div>

          <Separator />
        </div>

        {/* Main content grid */}
        <div className="mt-6 grid gap-6">
          {/* Personal Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <UserCheck className="h-5 w-5" />
                Informations personnelles
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Name section */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-xs text-muted-foreground">Prénom</p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.first_name ?? '-'}
                  </p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">
                    Nom de famille
                  </p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.last_name ?? '-'}
                  </p>
                </div>
              </div>

              <Separator />

              {/* Additional info */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                <div>
                  <p className="text-xs text-muted-foreground">
                    Date de naissance
                  </p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.birthday ? formatDate(guest.birthday) : '-'}
                  </p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Genre</p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.gender ?? '-'}
                  </p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">
                    Langue préférée
                  </p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.preferred_language ?? '-'}
                  </p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Nationalité</p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.nationality ? (
                      <Badge variant="outline" className="text-xs">
                        {guest.nationality}
                      </Badge>
                    ) : (
                      '-'
                    )}
                  </p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">
                    Ville d&apos;origine
                  </p>
                  <p className="text-sm font-medium mt-0.5">
                    {guest.hometown && guest.hometown !== '.'
                      ? guest.hometown
                      : '-'}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Notes - if exists */}
          {guest.notes && (
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg flex items-center gap-2">
                  <StickyNote className="h-5 w-5" />
                  Notes et commentaires
                </CardTitle>
              </CardHeader>
              <CardContent>
                <blockquote className="border-l-4 border-muted-foreground/20 pl-4 italic text-muted-foreground">
                  {guest.notes}
                </blockquote>
              </CardContent>
            </Card>
          )}

          {/* Metadata */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Clock className="h-4 w-4" />
                Informations système
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-6 text-sm">
                <div>
                  <span className="text-muted-foreground">Créé le</span>
                  <span className="ml-2 font-medium">
                    {guest.created_at ? formatDateTime(guest.created_at) : '-'}
                  </span>
                </div>
                <div>
                  <span className="text-muted-foreground">
                    Dernière mise à jour
                  </span>
                  <span className="ml-2 font-medium">
                    {guest.last_updated_timestamp
                      ? formatDateTime(guest.last_updated_timestamp)
                      : '-'}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </DashboardLayout>
  );
}
