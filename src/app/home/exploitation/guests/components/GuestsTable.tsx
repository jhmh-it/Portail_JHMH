'use client';

import { User } from 'lucide-react';
import { useRouter } from 'next/navigation';

import { Badge } from '@/components/ui/badge';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { useLoadingStore } from '@/stores/loading-store';

// Internal imports
import {
  formatPhone,
  formatGuestName,
  formatAddress,
  getGuestStatusColor,
} from '../lib';
import type { Guest } from '../types';

interface GuestsTableProps {
  guests: Guest[];
  currentPage: number;
  pageSize: number;
  total: number;
  onPageChange: (page: number) => void;
}

export function GuestsTable({
  guests,
  currentPage,
  pageSize,
  total,
  onPageChange,
}: GuestsTableProps) {
  const router = useRouter();
  const { showLoading } = useLoadingStore();

  const handleRowClick = (guest: Guest) => {
    showLoading();
    router.push(`/home/exploitation/guests/${guest.id}`);
  };

  const totalPages = Math.ceil(total / pageSize);
  const maxVisiblePages = 5;

  const getVisiblePages = () => {
    const pages: number[] = [];
    let start = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    const end = Math.min(totalPages, start + maxVisiblePages - 1);

    if (end - start + 1 < maxVisiblePages) {
      start = Math.max(1, end - maxVisiblePages + 1);
    }

    for (let i = start; i <= end; i++) {
      pages.push(i);
    }

    return pages;
  };

  return (
    <>
      {/* Table */}
      <div className="overflow-hidden rounded-lg border">
        <Table>
          <TableHeader>
            <TableRow className="hover:bg-transparent">
              <TableHead className="w-[30%]">Client</TableHead>
              <TableHead className="w-[30%]">Contact</TableHead>
              <TableHead className="w-[30%]">Localisation</TableHead>
              <TableHead className="w-[10%]">Statut</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {guests.map(guest => {
              const statusInfo = getGuestStatusColor(guest);
              const guestName = formatGuestName(guest);
              const address = formatAddress(guest);

              return (
                <TableRow
                  key={guest.id}
                  className="hover:bg-muted/50 cursor-pointer"
                  onClick={() => handleRowClick(guest)}
                >
                  <TableCell>
                    <div className="flex items-center gap-3">
                      <div className="bg-primary/10 flex h-10 w-10 items-center justify-center rounded-full">
                        <User className="text-primary h-5 w-5" />
                      </div>
                      <div>
                        <div className="font-medium">{guestName}</div>
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="space-y-1">
                      {guest.email && (
                        <div className="text-sm">{guest.email}</div>
                      )}
                      {guest.phone && (
                        <div className="text-muted-foreground text-sm">
                          {formatPhone(guest.phone)}
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="text-sm">{address || '-'}</div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={statusInfo.variant}>
                      {statusInfo.label}
                    </Badge>
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="mt-4 flex justify-center">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious
                  onClick={() =>
                    currentPage > 1 && onPageChange(currentPage - 1)
                  }
                  className={
                    currentPage === 1
                      ? 'pointer-events-none opacity-50'
                      : 'cursor-pointer'
                  }
                />
              </PaginationItem>

              {currentPage > 3 && (
                <>
                  <PaginationItem>
                    <PaginationLink
                      onClick={() => onPageChange(1)}
                      className="cursor-pointer"
                    >
                      1
                    </PaginationLink>
                  </PaginationItem>
                  {currentPage > 4 && (
                    <PaginationItem>
                      <span className="px-3">...</span>
                    </PaginationItem>
                  )}
                </>
              )}

              {getVisiblePages().map(page => (
                <PaginationItem key={page}>
                  <PaginationLink
                    onClick={() => onPageChange(page)}
                    isActive={page === currentPage}
                    className="cursor-pointer"
                  >
                    {page}
                  </PaginationLink>
                </PaginationItem>
              ))}

              {currentPage < totalPages - 2 && (
                <>
                  {currentPage < totalPages - 3 && (
                    <PaginationItem>
                      <span className="px-3">...</span>
                    </PaginationItem>
                  )}
                  <PaginationItem>
                    <PaginationLink
                      onClick={() => onPageChange(totalPages)}
                      className="cursor-pointer"
                    >
                      {totalPages}
                    </PaginationLink>
                  </PaginationItem>
                </>
              )}

              <PaginationItem>
                <PaginationNext
                  onClick={() =>
                    currentPage < totalPages && onPageChange(currentPage + 1)
                  }
                  className={
                    currentPage === totalPages
                      ? 'pointer-events-none opacity-50'
                      : 'cursor-pointer'
                  }
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </>
  );
}
