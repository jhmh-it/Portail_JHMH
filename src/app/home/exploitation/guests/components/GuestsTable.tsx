'use client';

import { MoreHorizontal, Search, User } from 'lucide-react';
import { useRouter } from 'next/navigation';

import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { useLoadingStore } from '@/stores/loading-store';
import type { Guest } from '@/types/guest';

interface GuestsTableProps {
  guests: Guest[];
  isLoading?: boolean;
  error?: string | null;
  currentPage: number;
  pageSize: number;
  total: number;
  onPageChange: (page: number) => void;
}

function formatPhone(phone: string): string {
  if (!phone) return '';

  // Supprimer tous les caractères non numériques
  const cleaned = phone.replace(/\D/g, '');

  // Vérifier si c'est un numéro français (commence par 33)
  if (cleaned.startsWith('33')) {
    const national = cleaned.substring(2);
    if (national.length === 9) {
      return `+33 ${national.substring(0, 1)} ${national.substring(1, 3)} ${national.substring(3, 5)} ${national.substring(5, 7)} ${national.substring(7, 9)}`;
    }
  }

  // Vérifier si c'est un numéro français standard (10 chiffres)
  if (cleaned.length === 10 && cleaned.startsWith('0')) {
    return `${cleaned.substring(0, 2)} ${cleaned.substring(2, 4)} ${cleaned.substring(4, 6)} ${cleaned.substring(6, 8)} ${cleaned.substring(8, 10)}`;
  }

  // Retourner le numéro tel quel si format non reconnu
  return phone;
}

export function GuestsTable({
  guests,
  isLoading = false,
  error,
  currentPage,
  pageSize,
  total,
  onPageChange,
}: GuestsTableProps) {
  const router = useRouter();
  const { showLoading } = useLoadingStore();

  const handleRowClick = (guest: Guest) => {
    showLoading();
    router.push(`/home/exploitation/guests/${guest.id}`);
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        <div className="flex items-center gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Skeleton className="h-10 w-full" />
          </div>
        </div>

        <div className="border rounded-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Client</TableHead>
                <TableHead>Contact</TableHead>
                <TableHead>Localisation</TableHead>
                <TableHead>Notes</TableHead>
                <TableHead className="w-[50px]" />
              </TableRow>
            </TableHeader>
            <TableBody>
              {Array.from({ length: 5 }).map((_, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <div className="flex items-center gap-3">
                      <Skeleton className="h-8 w-8 rounded-full" />
                      <div className="space-y-1">
                        <Skeleton className="h-4 w-32" />
                        <Skeleton className="h-3 w-20" />
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="space-y-1">
                      <Skeleton className="h-3 w-24" />
                      <Skeleton className="h-3 w-20" />
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="space-y-1">
                      <Skeleton className="h-3 w-20" />
                      <Skeleton className="h-3 w-16" />
                    </div>
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-3 w-40" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-8 w-8" />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12 border rounded-lg">
        <User className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-destructive mb-2">
          Erreur de chargement
        </h3>
        <p className="text-sm text-muted-foreground">{error}</p>
      </div>
    );
  }

  if (guests.length === 0) {
    return (
      <div className="text-center py-12 border rounded-lg">
        <User className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-muted-foreground mb-2">
          Aucun client trouvé
        </h3>
        <p className="text-sm text-muted-foreground">
          Aucun client ne correspond aux critères de recherche
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="border rounded-lg">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Client</TableHead>
              <TableHead>Contact</TableHead>
              <TableHead>Localisation</TableHead>
              <TableHead>Notes</TableHead>
              <TableHead className="w-[50px]" />
            </TableRow>
          </TableHeader>
          <TableBody>
            {guests.map(guest => (
              <TableRow
                key={guest.id}
                className="cursor-pointer hover:bg-muted/50 transition-colors"
                onClick={() => handleRowClick(guest)}
              >
                <TableCell>
                  <div className="flex items-center gap-3">
                    <div className="h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center">
                      <User className="h-4 w-4 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">
                        {guest.full_name ??
                          `${guest.first_name ?? ''} ${guest.last_name ?? ''}`.trim() ??
                          '-'}
                      </p>
                      <p className="text-xs text-muted-foreground font-mono">
                        {guest.id}
                      </p>
                    </div>
                  </div>
                </TableCell>

                <TableCell>
                  <div className="space-y-1">
                    {guest.email && <p className="text-sm">{guest.email}</p>}
                    {guest.phone && (
                      <p className="text-sm font-mono">
                        {formatPhone(guest.phone)}
                      </p>
                    )}
                    {!guest.email && !guest.phone && (
                      <p className="text-sm text-muted-foreground">-</p>
                    )}
                  </div>
                </TableCell>

                <TableCell>
                  <div className="space-y-1">
                    {guest.city && <p className="text-sm">{guest.city}</p>}
                    {guest.country && (
                      <p className="text-sm text-muted-foreground">
                        {guest.country}
                      </p>
                    )}
                    {!guest.city && !guest.country && (
                      <p className="text-sm text-muted-foreground">-</p>
                    )}
                  </div>
                </TableCell>

                <TableCell>
                  <p className="text-sm text-muted-foreground max-w-xs truncate">
                    {guest.notes ?? '-'}
                  </p>
                </TableCell>

                <TableCell>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0"
                        onClick={e => e.stopPropagation()}
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem
                        onClick={e => {
                          e.stopPropagation();
                          handleRowClick(guest);
                        }}
                      >
                        Voir les détails
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      {total > pageSize && (
        <div className="flex items-center justify-center mt-4">
          <Pagination>
            <PaginationContent>
              {currentPage > 1 && (
                <PaginationItem>
                  <PaginationPrevious
                    onClick={() => onPageChange(currentPage - 1)}
                    className="cursor-pointer"
                  />
                </PaginationItem>
              )}

              {Array.from(
                { length: Math.ceil(total / pageSize) },
                (_, i) => i + 1
              )
                .filter(
                  page =>
                    page === 1 ||
                    page === Math.ceil(total / pageSize) ||
                    Math.abs(page - currentPage) <= 1
                )
                .map((page, index, array) => (
                  <PaginationItem key={page}>
                    {index > 0 && array[index - 1] !== page - 1 && (
                      <span className="px-2">...</span>
                    )}
                    <PaginationLink
                      onClick={() => onPageChange(page)}
                      isActive={page === currentPage}
                      className="cursor-pointer"
                    >
                      {page}
                    </PaginationLink>
                  </PaginationItem>
                ))}

              {currentPage < Math.ceil(total / pageSize) && (
                <PaginationItem>
                  <PaginationNext
                    onClick={() => onPageChange(currentPage + 1)}
                    className="cursor-pointer"
                  />
                </PaginationItem>
              )}
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  );
}
