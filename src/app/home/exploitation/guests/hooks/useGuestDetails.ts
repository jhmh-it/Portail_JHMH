/**
 * Hook for fetching individual guest details
 */

'use client';

import { useQuery, type QueryClient } from '@tanstack/react-query';

import { QUERY_KEYS, CACHE_CONFIG } from '../config';
import type { Guest } from '../types/guest';

/**
 * Hook return type
 */
export interface UseGuestDetailsReturn {
  guest: Guest | null;
  isLoading: boolean;
  error: Error | null;
  refetch: () => void;
}

/**
 * Fetch guest details from API
 */
async function fetchGuestDetails(guestId: string): Promise<Guest | null> {
  // Use Next.js API route instead of direct JHMH API call
  const response = await fetch(`/api/guests?guest_id=${guestId}`);

  if (!response.ok) {
    throw new Error(`Failed to fetch guest details: ${response.statusText}`);
  }

  const result = await response.json();

  // Debug logging (development only)
  if (process.env.NODE_ENV === 'development') {
    console.warn('[useGuestDetails] API Response:', result);
  }

  if (result.success && result.data && result.data.length > 0) {
    return result.data[0];
  }

  // If no data found, throw an error to trigger error state
  throw new Error('Guest non trouvÃ©');
}

/**
 * Hook for fetching guest details
 */
export function useGuestDetails(guestId: string): UseGuestDetailsReturn {
  const {
    data: guest = null,
    isLoading,
    error,
    refetch,
  } = useQuery({
    queryKey: QUERY_KEYS.GUEST_DETAILS(guestId),
    queryFn: () => fetchGuestDetails(guestId),
    staleTime: CACHE_CONFIG.GUEST_DETAILS.staleTime,
    gcTime: CACHE_CONFIG.GUEST_DETAILS.gcTime,
    enabled: !!guestId,
    retry: 2,
  });

  return {
    guest,
    isLoading,
    error: error ?? null,
    refetch,
  };
}

/**
 * Prefetch guest details
 */
export async function prefetchGuestDetails(
  queryClient: QueryClient,
  guestId: string
): Promise<void> {
  await queryClient.prefetchQuery({
    queryKey: QUERY_KEYS.GUEST_DETAILS(guestId),
    queryFn: () => fetchGuestDetails(guestId),
    staleTime: CACHE_CONFIG.GUEST_DETAILS.staleTime,
  });
}
