/**
 * Hook for managing guests data with React Query
 */

'use client';

import { useQuery, useQueryClient } from '@tanstack/react-query';

import { jhmhApiClient } from '@/lib/jhmh-api';

import { QUERY_KEYS, CACHE_CONFIG, API_ENDPOINTS } from '../config';
import { buildGuestQueryParams } from '../lib';
import type { Guest, GuestFilters, GuestsApiResponse } from '../types/guest';

/**
 * Hook return type
 */
export interface UseGuestsReturn {
  guests: Guest[];
  total: number;
  isLoading: boolean;
  isRefreshing: boolean;
  error: Error | null;
  refetch: () => void;
  invalidate: () => void;
}

/**
 * Fetch guests from API
 */
async function fetchGuests(filters: GuestFilters): Promise<{
  guests: Guest[];
  total: number;
}> {
  const queryParams = buildGuestQueryParams(filters);
  const queryString = queryParams.toString();
  const url = `${API_ENDPOINTS.GUESTS}${queryString ? `?${queryString}` : ''}`;

  const response = await jhmhApiClient.get<GuestsApiResponse>(url);

  // FIX: La réponse est directement les données, pas wrappée dans un objet
  // Si response.data est un array, c'est directement les guests
  if (Array.isArray(response.data)) {
    return {
      guests: response.data,
      total: response.data.length, // Temp fix, nous n'avons pas le total réel
    };
  }

  // Sinon, utiliser la structure attendue
  return {
    guests: response.data.data ?? [],
    total: response.data.meta?.total ?? 0,
  };
}

/**
 * Main hook for guests management
 */
export function useGuests(filters: GuestFilters): UseGuestsReturn {
  const queryClient = useQueryClient();

  const { data, isLoading, isFetching, error, refetch } = useQuery({
    queryKey: QUERY_KEYS.GUESTS(filters),
    queryFn: () => fetchGuests(filters),
    staleTime: CACHE_CONFIG.GUESTS.staleTime,
    gcTime: CACHE_CONFIG.GUESTS.gcTime,
    retry: 2,
    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  const invalidate = () => {
    queryClient.invalidateQueries({ queryKey: ['guests'] });
  };

  return {
    guests: data?.guests ?? [],
    total: data?.total ?? 0,
    isLoading,
    isRefreshing: isFetching && !isLoading,
    error,
    refetch,
    invalidate,
  };
}

/**
 * Prefetch guests data
 */
export async function prefetchGuests(
  queryClient: ReturnType<typeof useQueryClient>,
  filters: GuestFilters
): Promise<void> {
  await queryClient.prefetchQuery({
    queryKey: QUERY_KEYS.GUESTS(filters),
    queryFn: () => fetchGuests(filters),
    staleTime: CACHE_CONFIG.GUESTS.staleTime,
  });
}

/**
 * Invalidate guests cache
 */
export function invalidateGuests(
  queryClient: ReturnType<typeof useQueryClient>
): void {
  queryClient.invalidateQueries({ queryKey: ['guests'] });
}
