/**
 * Hook for managing guests filters state
 */

'use client';

import { useState, useCallback } from 'react';

import { DEFAULT_FILTERS } from '../config';
import { hasActiveFilters, countActiveFilters } from '../lib';
import type { GuestFilters } from '../types';

/**
 * Hook return type
 */
export interface UseGuestsFiltersReturn {
  filters: GuestFilters;
  hasActiveFilters: boolean;
  activeFiltersCount: number;
  showFilters: boolean;
  setShowFilters: (show: boolean) => void;
  toggleFilters: () => void;
  updateFilter: (
    key: keyof GuestFilters,
    value: string | number | boolean | undefined
  ) => void;
  updateFilters: (updates: Partial<GuestFilters>) => void;
  resetFilters: () => void;
  handleSearchChange: (value: string) => void;
  handlePageChange: (page: number) => void;
}

/**
 * Hook for managing filter state
 */
export function useGuestsFilters(): UseGuestsFiltersReturn {
  const [filters, setFilters] = useState<GuestFilters>(DEFAULT_FILTERS);
  const [showFilters, setShowFilters] = useState(false);

  const updateFilter = useCallback(
    (key: keyof GuestFilters, value: string | number | boolean | undefined) => {
      setFilters(prev => ({
        ...prev,
        [key]: value,
        // Reset to page 1 when filters change (except page itself)
        ...(key !== 'page' ? { page: 1 } : {}),
      }));
    },
    []
  );

  const updateFilters = useCallback((updates: Partial<GuestFilters>) => {
    setFilters(prev => ({
      ...prev,
      ...updates,
      // Reset to page 1 if non-page filters changed
      ...(!('page' in updates) ? { page: 1 } : {}),
    }));
  }, []);

  const resetFilters = useCallback(() => {
    setFilters(DEFAULT_FILTERS);
    setShowFilters(false);
  }, []);

  const handleSearchChange = useCallback(
    (value: string) => {
      updateFilter('q', value);
    },
    [updateFilter]
  );

  const handlePageChange = useCallback(
    (page: number) => {
      updateFilter('page', page);
    },
    [updateFilter]
  );

  const toggleFilters = useCallback(() => {
    setShowFilters(prev => !prev);
  }, []);

  const isActive = hasActiveFilters(filters);
  const activeCount = countActiveFilters(filters);

  return {
    filters,
    hasActiveFilters: isActive,
    activeFiltersCount: activeCount,
    showFilters,
    setShowFilters,
    toggleFilters,
    updateFilter,
    updateFilters,
    resetFilters,
    handleSearchChange,
    handlePageChange,
  };
}
