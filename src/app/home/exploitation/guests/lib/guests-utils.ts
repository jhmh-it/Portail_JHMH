/**
 * Utility functions for Guests module
 */

import type { GuestFilters } from '../types';

/**
 * Format phone number for display with international support
 */
export function formatPhone(phone: string | undefined | null): string {
  if (!phone) return '';

  // Remove all non-numeric characters
  const cleaned = phone.replace(/\D/g, '');

  // Format based on country patterns
  // France (+33)
  if (cleaned.startsWith('33') && cleaned.length >= 11) {
    const national = cleaned.substring(2);
    if (national.length === 9) {
      return `+33 ${national.substring(0, 1)} ${national.substring(1, 3)} ${national.substring(3, 5)} ${national.substring(5, 7)} ${national.substring(7, 9)}`;
    }
  }

  // Standard French number (10 digits starting with 0)
  if (cleaned.length === 10 && cleaned.startsWith('0')) {
    return `${cleaned.substring(0, 2)} ${cleaned.substring(2, 4)} ${cleaned.substring(4, 6)} ${cleaned.substring(6, 8)} ${cleaned.substring(8, 10)}`;
  }

  // US/Canada (+1)
  if (cleaned.startsWith('1') && cleaned.length === 11) {
    const number = cleaned.substring(1);
    return `+1 (${number.substring(0, 3)}) ${number.substring(3, 6)}-${number.substring(6, 10)}`;
  }

  // UK (+44)
  if (cleaned.startsWith('44') && cleaned.length >= 12) {
    const national = cleaned.substring(2);
    if (national.length === 10) {
      return `+44 ${national.substring(0, 4)} ${national.substring(4, 7)} ${national.substring(7, 10)}`;
    }
  }

  // Germany (+49)
  if (cleaned.startsWith('49') && cleaned.length >= 11) {
    const national = cleaned.substring(2);
    return `+49 ${national.substring(0, 3)} ${national.substring(3, 6)} ${national.substring(6)}`;
  }

  // Italy (+39)
  if (cleaned.startsWith('39') && cleaned.length >= 12) {
    const national = cleaned.substring(2);
    return `+39 ${national.substring(0, 3)} ${national.substring(3, 6)} ${national.substring(6)}`;
  }

  // Spain (+34)
  if (cleaned.startsWith('34') && cleaned.length === 11) {
    const national = cleaned.substring(2);
    return `+34 ${national.substring(0, 3)} ${national.substring(3, 6)} ${national.substring(6, 9)}`;
  }

  // Brazil (+55)
  if (cleaned.startsWith('55') && cleaned.length >= 12) {
    const national = cleaned.substring(2);
    if (national.length === 11) {
      return `+55 (${national.substring(0, 2)}) ${national.substring(2, 7)}-${national.substring(7, 11)}`;
    }
  }

  // India (+91)
  if (cleaned.startsWith('91') && cleaned.length === 12) {
    const national = cleaned.substring(2);
    return `+91 ${national.substring(0, 5)} ${national.substring(5, 10)}`;
  }

  // UAE (+971)
  if (cleaned.startsWith('971') && cleaned.length >= 11) {
    const national = cleaned.substring(3);
    return `+971 ${national.substring(0, 2)} ${national.substring(2, 5)} ${national.substring(5)}`;
  }

  // Australia (+61)
  if (cleaned.startsWith('61') && cleaned.length >= 11) {
    const national = cleaned.substring(2);
    return `+61 ${national.substring(0, 3)} ${national.substring(3, 6)} ${national.substring(6)}`;
  }

  // Netherlands (+31)
  if (cleaned.startsWith('31') && cleaned.length >= 11) {
    const national = cleaned.substring(2);
    return `+31 ${national.substring(0, 2)} ${national.substring(2, 5)} ${national.substring(5)}`;
  }

  // Slovakia/Czech (+421/420)
  if (
    (cleaned.startsWith('421') || cleaned.startsWith('420')) &&
    cleaned.length >= 12
  ) {
    const countryCode = cleaned.substring(0, 3);
    const national = cleaned.substring(3);
    return `+${countryCode} ${national.substring(0, 3)} ${national.substring(3, 6)} ${national.substring(6)}`;
  }

  // Generic international format for other countries
  if (cleaned.length >= 10) {
    // If number starts with country code (detected by length > 10)
    if (cleaned.length > 10) {
      // Try to detect common country code lengths
      let countryCodeLength = 1;
      if (cleaned.length >= 12) countryCodeLength = 2;
      if (cleaned.length >= 13) countryCodeLength = 3;

      const countryCode = cleaned.substring(0, countryCodeLength);
      const national = cleaned.substring(countryCodeLength);

      // Group the national number in chunks of 3-4 digits
      const chunks = [];
      for (let i = 0; i < national.length; i += 3) {
        chunks.push(national.substring(i, i + 3));
      }

      return `+${countryCode} ${chunks.join(' ')}`;
    }

    // Local number (10 digits)
    return `${cleaned.substring(0, 3)} ${cleaned.substring(3, 6)} ${cleaned.substring(6, 10)}`;
  }

  // If no pattern matches, return with minimal formatting
  if (cleaned.length >= 6) {
    const chunks = [];
    for (let i = 0; i < cleaned.length; i += 3) {
      chunks.push(cleaned.substring(i, i + 3));
    }
    return chunks.join(' ');
  }

  // Return original if too short
  return phone;
}

/**
 * Format guest full name
 */
export function formatGuestName(guest: {
  full_name?: string;
  first_name?: string;
  last_name?: string;
}): string {
  if (guest.full_name) {
    return guest.full_name;
  }

  const parts = [guest.first_name, guest.last_name].filter(Boolean);
  return parts.length > 0 ? parts.join(' ') : 'Guest';
}

/**
 * Get guest initials for avatar
 */
export function getGuestInitials(guest: {
  full_name?: string;
  first_name?: string;
  last_name?: string;
}): string {
  const name = formatGuestName(guest);
  const parts = name.split(' ').filter(Boolean);

  if (parts.length === 0) return 'G';
  if (parts.length === 1) return parts[0].charAt(0).toUpperCase();

  return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`.toUpperCase();
}

/**
 * Format address for display
 */
export function formatAddress(guest: {
  address?: string;
  city?: string;
  postal_code?: string;
  country?: string;
}): string {
  const parts = [
    guest.address,
    guest.postal_code && guest.city
      ? `${guest.postal_code} ${guest.city}`
      : guest.city,
    guest.country,
  ].filter(Boolean);

  return parts.join(', ');
}

/**
 * Get guest status badge color
 */
export function getGuestStatusColor(guest: {
  vip_status?: boolean;
  blacklisted?: boolean;
  is_returning?: boolean;
}): {
  variant: 'default' | 'destructive' | 'secondary' | 'outline';
  label: string;
} {
  if (guest.blacklisted) {
    return { variant: 'destructive', label: 'Blacklisted' };
  }
  if (guest.vip_status) {
    return { variant: 'default', label: 'VIP' };
  }
  if (guest.is_returning) {
    return { variant: 'secondary', label: 'Returning' };
  }
  return { variant: 'outline', label: 'New' };
}

/**
 * Build query parameters for API requests
 */
export function buildGuestQueryParams(filters: GuestFilters): URLSearchParams {
  const queryParams = new URLSearchParams();

  if (filters?.page) queryParams.append('page', filters.page.toString());
  if (filters?.page_size)
    queryParams.append('page_size', filters.page_size.toString());
  if (filters?.q) queryParams.append('q', filters.q);
  if (filters?.guest_id) queryParams.append('guest_id', filters.guest_id);
  if (filters?.confirmation_code)
    queryParams.append('confirmation_code', filters.confirmation_code);

  return queryParams;
}

/**
 * Check if filters are active
 */
export function hasActiveFilters(filters: {
  q?: string;
  guest_id?: string;
  confirmation_code?: string;
}): boolean {
  return Boolean(filters.q ?? filters.guest_id ?? filters.confirmation_code);
}

/**
 * Count active filters
 */
export function countActiveFilters(filters: {
  q?: string;
  guest_id?: string;
  confirmation_code?: string;
}): number {
  return [filters.q, filters.guest_id, filters.confirmation_code].filter(
    Boolean
  ).length;
}
