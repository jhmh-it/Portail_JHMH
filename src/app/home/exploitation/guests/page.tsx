'use client';

import { Search, Filter, RefreshCw, Users, X } from 'lucide-react';
import { useState, useEffect } from 'react';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useLoadingStore } from '@/stores/loading-store';
import type { GuestFilters, Guest } from '@/types/guest';

import { GuestsTable } from './components/GuestsTable';

export default function GuestsPage() {
  const [guests, setGuests] = useState<Guest[]>([]);
  const [total, setTotal] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showFilters, setShowFilters] = useState(false);
  const { hideLoading } = useLoadingStore();

  // Filtres
  const [filters, setFilters] = useState<GuestFilters>({
    page: 1,
    page_size: 20,
    q: '',
    guest_id: '',
    confirmation_code: '',
  });

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Exploitation Information', href: '/home/exploitation' },
    { label: 'Guests' },
  ];

  // Fonction pour récupérer les guests
  const fetchGuests = async () => {
    try {
      setError(null);

      // Construire les paramètres de la requête
      const queryParams = new URLSearchParams();

      if (filters.page) queryParams.append('page', filters.page.toString());
      if (filters.page_size)
        queryParams.append('page_size', filters.page_size.toString());
      if (filters.q) queryParams.append('q', filters.q);
      if (filters.guest_id) queryParams.append('guest_id', filters.guest_id);
      if (filters.confirmation_code)
        queryParams.append('confirmation_code', filters.confirmation_code);

      const response = await fetch(`/api/guests?${queryParams.toString()}`);

      if (!response.ok) {
        throw new Error('Erreur lors de la récupération des guests');
      }

      const result = await response.json();

      if (result.success) {
        setGuests(result.data ?? []);
        setTotal(result.meta?.total ?? 0);
      } else {
        throw new Error(result.error ?? 'Erreur inconnue');
      }
    } catch (err) {
      console.error('Erreur:', err);
      setError(err instanceof Error ? err.message : 'Une erreur est survenue');
    } finally {
      setIsLoading(false);
      setIsRefreshing(false);
      hideLoading();
    }
  };

  // Charger les guests au montage et quand les filtres changent
  useEffect(() => {
    fetchGuests();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [filters]);

  const handleRefresh = () => {
    setIsRefreshing(true);
    fetchGuests();
  };

  const handleSearchChange = (value: string) => {
    setFilters((prev: GuestFilters) => ({ ...prev, q: value, page: 1 }));
  };

  const handlePageChange = (page: number) => {
    setFilters((prev: GuestFilters) => ({ ...prev, page }));
  };

  const hasActiveFilters = Boolean(
    filters.q ?? filters.guest_id ?? filters.confirmation_code
  );

  const handleClearFilters = () => {
    setFilters({
      page: 1,
      page_size: 20,
      q: '',
      guest_id: '',
      confirmation_code: '',
    });
    setShowFilters(false);
  };

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <div className="flex flex-col gap-2">
          <div className="flex items-center gap-3">
            <Users className="h-8 w-8 text-primary" />
            <h1 className="text-3xl font-bold tracking-tight">Guests</h1>
          </div>
          <p className="text-muted-foreground">
            Consultez et gérez les informations des invités et clients
          </p>
        </div>

        {/* Filters and Search */}
        <Card>
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <CardTitle className="text-base">Recherche et filtres</CardTitle>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleRefresh}
                  disabled={isRefreshing}
                  className="cursor-pointer"
                >
                  <RefreshCw
                    className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`}
                  />
                  Actualiser
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowFilters(!showFilters)}
                  className="cursor-pointer"
                >
                  <Filter className="h-4 w-4 mr-2" />
                  Filtres
                  {hasActiveFilters && (
                    <span className="ml-1 rounded-full bg-primary px-1.5 py-0.5 text-xs text-primary-foreground">
                      {
                        [
                          filters.q,
                          filters.guest_id,
                          filters.confirmation_code,
                        ].filter(Boolean).length
                      }
                    </span>
                  )}
                </Button>
                {hasActiveFilters && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleClearFilters}
                    className="cursor-pointer"
                  >
                    <X className="h-4 w-4 mr-2" />
                    Réinitialiser
                  </Button>
                )}
              </div>
            </div>

            {/* Search Bar */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Rechercher par nom, email, téléphone..."
                value={filters.q ?? ''}
                onChange={e => handleSearchChange(e.target.value)}
                className="pl-10 cursor-pointer"
              />
            </div>
          </CardHeader>

          {/* Advanced Filters */}
          {showFilters && (
            <CardContent className="pt-0">
              <div className="space-y-4 rounded-lg border p-4 bg-card animate-in slide-in-from-top-2">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="guest_id" className="text-sm font-medium">
                      ID Guest
                    </Label>
                    <Input
                      id="guest_id"
                      placeholder="ID spécifique du guest"
                      value={filters.guest_id ?? ''}
                      onChange={e =>
                        setFilters((prev: GuestFilters) => ({
                          ...prev,
                          guest_id: e.target.value,
                          page: 1,
                        }))
                      }
                      className="cursor-pointer"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label
                      htmlFor="confirmation_code"
                      className="text-sm font-medium"
                    >
                      Code de confirmation
                    </Label>
                    <Input
                      id="confirmation_code"
                      placeholder="Code de confirmation de réservation"
                      value={filters.confirmation_code ?? ''}
                      onChange={e =>
                        setFilters((prev: GuestFilters) => ({
                          ...prev,
                          confirmation_code: e.target.value,
                          page: 1,
                        }))
                      }
                      className="cursor-pointer"
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          )}
        </Card>

        {/* Results */}
        <Card>
          <CardHeader>
            <CardTitle className="text-base">
              Résultats {total > 0 && `(${total} guest${total > 1 ? 's' : ''})`}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <GuestsTable
              guests={guests}
              isLoading={isLoading}
              error={error}
              currentPage={filters.page ?? 1}
              pageSize={filters.page_size ?? 20}
              total={total}
              onPageChange={handlePageChange}
            />
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
