/**
 * Guests List Page - Professional guest management interface
 * Features: Advanced filtering, search, pagination, and real-time data
 */

'use client';

import { Users } from 'lucide-react';

// External imports
import { DashboardLayout, PageHeader } from '@/components/dashboard';
import { ErrorVariants, NoDataVariants } from '@/components/states';

// Internal imports
import { GuestsTable, GuestsFilters, GuestsTableSkeleton } from './components';
import { PAGE_CONFIGS, BREADCRUMBS } from './config';
import { useGuests, useGuestsFilters } from './hooks';

/**
 * Guests Page Component
 * Comprehensive guest management with filtering, search, and navigation
 */
export default function GuestsPage() {
  // Filters management
  const {
    filters,
    hasActiveFilters,
    activeFiltersCount,
    showFilters,
    toggleFilters,
    updateFilter,
    resetFilters,
    handleSearchChange,
    handlePageChange,
  } = useGuestsFilters();

  // Data fetching
  const { guests, total, isLoading, isRefreshing, error, refetch } =
    useGuests(filters);

  // No need for global loading management here
  // The page shows its own loading state with GuestsTableSkeleton

  // Note: Guests always load automatically, no initial "search" state needed

  /**
   * Renders the page content with proper state management
   * Handles loading, error, empty, and success states professionally
   */
  return (
    <DashboardLayout breadcrumbs={[...BREADCRUMBS.GUESTS]}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <div className="flex items-center gap-3">
          <Users className="text-primary h-8 w-8" />
          <PageHeader
            title={PAGE_CONFIGS.GUESTS.title}
            description={PAGE_CONFIGS.GUESTS.description}
          />
        </div>

        {/* Filters and Search */}
        <GuestsFilters
          filters={filters}
          hasActiveFilters={hasActiveFilters}
          activeFiltersCount={activeFiltersCount}
          showFilters={showFilters}
          isRefreshing={isRefreshing}
          onSearchChange={handleSearchChange}
          onFilterChange={updateFilter}
          onToggleFilters={toggleFilters}
          onResetFilters={resetFilters}
          onRefresh={() => refetch()}
        />

        {/* Results Section - Professional state management */}
        <section aria-label="Liste des guests">
          {(() => {
            // Loading State - Professional skeleton
            if (isLoading) {
              return (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h2 className="text-muted-foreground text-base font-medium">
                      Chargement des guests...
                    </h2>
                  </div>
                  <GuestsTableSkeleton />
                </div>
              );
            }

            // Error State - Professional error handling
            if (error) {
              return (
                <ErrorVariants.Card
                  error={error}
                  onRetry={() => refetch()}
                  title="Erreur lors du chargement des guests"
                />
              );
            }

            // Empty State - No guests found
            if (guests.length === 0) {
              return (
                <NoDataVariants.Empty
                  message="Aucun guest trouvé"
                  description="Il n'y a actuellement aucun guest à afficher. Les guests apparaîtront ici une fois qu'ils seront disponibles dans le système."
                  variant="card"
                />
              );
            }

            // Success State - Display table with data
            return (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h2 className="text-base font-medium">
                    Résultats
                    {total > 0 && (
                      <span className="text-muted-foreground ml-2">
                        ({total} guest{total > 1 ? 's' : ''})
                      </span>
                    )}
                  </h2>
                  {isRefreshing && (
                    <div className="text-muted-foreground text-sm">
                      Actualisation en cours...
                    </div>
                  )}
                </div>
                <GuestsTable
                  guests={guests}
                  currentPage={filters.page}
                  pageSize={filters.page_size}
                  total={total}
                  onPageChange={handlePageChange}
                />
              </div>
            );
          })()}
        </section>
      </div>
    </DashboardLayout>
  );
}
