/**
 * Validation schemas for Guests module using Zod
 */

import { z } from 'zod';

/**
 * Guest type enum
 */
export const guestTypeEnum = z.enum(['individual', 'business']);

/**
 * Base guest schema
 */
export const guestSchema = z.object({
  id: z.string(),
  full_name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().email().optional().nullable(),
  phone: z.string().optional().nullable(),
  date_of_birth: z.string().optional().nullable(),
  birthday: z.string().optional().nullable(),
  place_of_birth: z.string().optional().nullable(),
  nationality: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  document_type: z.string().optional().nullable(),
  document_number: z.string().optional().nullable(),
  document_expiry: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postal_code: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  hometown: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  vip_status: z.boolean().optional().nullable(),
  blacklisted: z.boolean().optional().nullable(),
  is_returning: z.boolean().optional().nullable(),
  created_at: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  last_updated_timestamp: z.string().optional().nullable(),
  guest_type: guestTypeEnum.optional().nullable(),
  company_name: z.string().optional().nullable(),
  company_registration: z.string().optional().nullable(),
  contact_person: z.string().optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  marketing_consent: z.boolean().optional().nullable(),
  last_stay_date: z.string().optional().nullable(),
  total_stays: z.number().optional().nullable(),
  total_nights: z.number().optional().nullable(),
  last_updated_by: z.string().optional().nullable(),
  source: z.string().optional().nullable(),
  tags: z.array(z.string()).optional().nullable(),
  custom_fields: z.record(z.unknown()).optional().nullable(),
});

/**
 * Guest filters schema
 */
export const guestFiltersSchema = z.object({
  q: z.string().default(''),
  page: z.number().min(1).default(1),
  page_size: z.number().min(1).max(100).default(20),
  guest_type: z.string().optional(),
  is_returning: z.boolean().optional(),
  guest_id: z.string().optional(),
  confirmation_code: z.string().optional(),
});

/**
 * API response schema
 */
export const guestsResponseSchema = z.object({
  data: z.array(guestSchema),
  error: z.boolean(),
  message: z.string(),
  meta: z.object({
    filters_applied: z.record(z.unknown()),
    page: z.number(),
    page_size: z.number(),
    total: z.number(),
    total_pages: z.number(),
  }),
  timestamp: z.string(),
});

/**
 * Create guest request schema
 */
export const createGuestSchema = z.object({
  full_name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().email().optional(),
  phone: z.string().optional(),
  date_of_birth: z.string().optional(),
  place_of_birth: z.string().optional(),
  nationality: z.string().optional(),
  document_type: z.string().optional(),
  document_number: z.string().optional(),
  document_expiry: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  postal_code: z.string().optional(),
  country: z.string().optional(),
  hometown: z.string().optional(),
  notes: z.string().optional(),
  guest_type: guestTypeEnum.optional(),
  company_name: z.string().optional(),
  company_registration: z.string().optional(),
  contact_person: z.string().optional(),
  preferred_language: z.string().optional(),
  marketing_consent: z.boolean().optional(),
  source: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * Update guest request schema
 */
export const updateGuestSchema = createGuestSchema.partial();

/**
 * Type exports
 */
export type ValidatedGuest = z.infer<typeof guestSchema>;
export type ValidatedGuestFilters = z.infer<typeof guestFiltersSchema>;
export type ValidatedGuestsResponse = z.infer<typeof guestsResponseSchema>;
export type ValidatedCreateGuest = z.infer<typeof createGuestSchema>;
export type ValidatedUpdateGuest = z.infer<typeof updateGuestSchema>;

/**
 * Validation functions
 */
export function validateGuest(data: unknown): ValidatedGuest {
  return guestSchema.parse(data);
}

export function validateGuestFilters(data: unknown): ValidatedGuestFilters {
  return guestFiltersSchema.parse(data);
}

export function validateGuestsResponse(data: unknown): ValidatedGuestsResponse {
  return guestsResponseSchema.parse(data);
}

export function safeValidateGuest(data: unknown): {
  success: boolean;
  data?: ValidatedGuest;
  error?: z.ZodError;
} {
  const result = guestSchema.safeParse(data);
  if (result.success) {
    return { success: true, data: result.data };
  }
  return { success: false, error: result.error };
}
