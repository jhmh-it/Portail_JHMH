/**
 * useExploitationTools Hook - Business logic for exploitation tools
 * Handles navigation, loading states, and tool interactions
 */

'use client';

import { useRouter } from 'next/navigation';
import { useState } from 'react';

import { useLoadingStore } from '@/stores/loading-store';

import type { ExploitationTool, ToolClickHandler } from '../types';

/**
 * Custom hook for exploitation tools logic
 * Features: Navigation, loading states, error handling
 */
export function useExploitationTools() {
  const router = useRouter();
  const { showLoading } = useLoadingStore();
  const [loadingToolId, setLoadingToolId] = useState<string | null>(null);

  /**
   * Handle tool click with loading state
   */
  const handleToolClick: ToolClickHandler = async (tool: ExploitationTool) => {
    if (!tool.available) return;

    try {
      // Set local loading state for the specific tool
      setLoadingToolId(tool.id);

      // Show global loading with descriptive message
      showLoading(
        `Chargement de ${tool.title}...`,
        'Veuillez patienter pendant le chargement des donnÃ©es.'
      );

      // Navigate to the tool
      router.push(tool.href);
    } catch (error) {
      console.error(`Error navigating to ${tool.title}:`, error);
      setLoadingToolId(null);
    }
  };

  /**
   * Check if a specific tool is loading
   */
  const isToolLoading = (toolId: string): boolean => {
    return loadingToolId === toolId;
  };

  /**
   * Check if any tool is loading
   */
  const isAnyToolLoading = (): boolean => {
    return loadingToolId !== null;
  };

  return {
    handleToolClick,
    isToolLoading,
    isAnyToolLoading,
    loadingToolId,
  };
}
