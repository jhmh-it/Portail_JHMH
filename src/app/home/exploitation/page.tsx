'use client';

import { ArrowRight, BookOpen, Building } from 'lucide-react';
import { useRouter } from 'next/navigation';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { useLoadingStore } from '@/stores/loading-store';

export default function ExploitationPage() {
  const router = useRouter();
  const { showLoading } = useLoadingStore();

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Exploitation' },
  ];

  const tools = [
    {
      title: 'Réservations',
      description:
        'Consultez et gérez toutes les réservations de vos propriétés',
      icon: BookOpen,
      href: '/home/exploitation/reservations',
      available: true,
    },
    {
      title: 'Actifs',
      description:
        'Gérez et consultez tous vos actifs immobiliers avec leurs détails',
      icon: Building,
      href: '/home/exploitation/actifs',
      available: true,
    },
  ];

  const handleToolClick = (href: string, title: string) => {
    showLoading(
      `Chargement de ${title}...`,
      'Veuillez patienter pendant le chargement des données.'
    );
    router.push(href);
  };

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight text-navy">
            Exploitation
          </h1>
          <p className="text-muted-foreground">
            Outils d&apos;analyse et de gestion de l&apos;exploitation pour
            optimiser vos processus.
          </p>
        </div>

        {/* Grille des outils */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {tools.map(tool => (
            <Card
              key={tool.title}
              className="group hover:shadow-lg transition-all duration-200 hover:border-navy/20 relative"
            >
              <CardHeader>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-navy/10 rounded-lg group-hover:bg-navy/20 transition-colors">
                    <tool.icon className="h-6 w-6 text-navy" />
                  </div>
                  <CardTitle className="text-navy group-hover:text-navy/80 transition-colors">
                    {tool.title}
                  </CardTitle>
                </div>
                <CardDescription className="text-sm">
                  {tool.description}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button
                  className="w-full bg-navy text-white hover:bg-navy/90 group-hover:bg-navy/80 transition-colors"
                  disabled={!tool.available}
                  variant={tool.available ? 'default' : 'outline'}
                  onClick={
                    tool.available
                      ? () => handleToolClick(tool.href, tool.title)
                      : undefined
                  }
                >
                  {tool.available ? (
                    <div className="flex items-center justify-center gap-2">
                      Accéder
                      <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform" />
                    </div>
                  ) : (
                    <span>Bientôt disponible</span>
                  )}
                </Button>
              </CardContent>
              {!tool.available && (
                <div className="absolute inset-0 bg-background/50 rounded-lg" />
              )}
            </Card>
          ))}
        </div>
      </div>
    </DashboardLayout>
  );
}
