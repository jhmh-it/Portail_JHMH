'use client';

import { AlertCircle, WifiOff } from 'lucide-react';
import { useParams } from 'next/navigation';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  ReservationHeader,
  StayInformation,
  PaymentOverview,
  FinancialDetailsView,
  GuestInformation,
  ReservationTimeline,
  ReservationDetailsSkeleton,
  AdditionalDetails,
  useReservationDetails,
} from '@/features/reservation-details';

export default function ReservationDetailsPage() {
  const params = useParams();
  const confirmationCode = params.confirmationCode as string;

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Réservations', href: '/home/exploitation/reservations' },
    { label: confirmationCode },
  ];

  const { reservation, isLoading, isError, error, refetch } =
    useReservationDetails({
      confirmationCode,
      queryParams: {
        include_audit_note: true,
      },
    });

  // Error state
  if (isError) {
    const isNotFound = error?.message === 'Réservation non trouvée';
    const hasNetworkError = error?.message?.includes('Network') ?? false;
    const hasFetchError = error?.message?.includes('fetch') ?? false;
    const isNetworkError = hasNetworkError || hasFetchError;

    let errorContent;

    if (isNetworkError) {
      errorContent = (
        <>
          <div className="rounded-full bg-destructive/10 p-4">
            <WifiOff className="h-12 w-12 text-destructive" />
          </div>
          <h2 className="text-2xl font-semibold">Erreur de connexion</h2>
          <p className="text-muted-foreground">
            Impossible de se connecter au serveur. Vérifiez votre connexion
            internet et réessayez.
          </p>
        </>
      );
    } else if (isNotFound) {
      errorContent = (
        <>
          <div className="rounded-full bg-muted p-4">
            <AlertCircle className="h-12 w-12 text-muted-foreground" />
          </div>
          <h2 className="text-2xl font-semibold">Réservation introuvable</h2>
          <p className="text-muted-foreground">
            La réservation avec le code <strong>{confirmationCode}</strong>{' '}
            n&apos;existe pas ou a été supprimée.
          </p>
        </>
      );
    } else {
      errorContent = (
        <>
          <div className="rounded-full bg-destructive/10 p-4">
            <AlertCircle className="h-12 w-12 text-destructive" />
          </div>
          <h2 className="text-2xl font-semibold">Une erreur est survenue</h2>
          <p className="text-muted-foreground">
            {error?.message ??
              'Impossible de charger les détails de la réservation.'}
          </p>
        </>
      );
    }

    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex flex-col items-center justify-center min-h-[60vh] gap-6 p-8">
          <div className="flex flex-col items-center gap-4 max-w-md text-center">
            {errorContent}

            <div className="flex gap-3 mt-4">
              <Button variant="outline" onClick={() => window.history.back()}>
                Retour
              </Button>
              {!isNotFound && (
                <Button onClick={() => refetch()}>Réessayer</Button>
              )}
            </div>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Loading state
  if (isLoading || !reservation) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="container mx-auto py-6">
          <ReservationDetailsSkeleton />
        </div>
      </DashboardLayout>
    );
  }

  // Success state with data
  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="container mx-auto py-6">
        {/* Header section */}
        <ReservationHeader reservation={reservation} />

        {/* Main content with tabs */}
        <Tabs defaultValue="overview" className="mt-6">
          <TabsList className="grid w-full grid-cols-4 lg:w-[500px]">
            <TabsTrigger value="overview">Vue d&apos;ensemble</TabsTrigger>
            <TabsTrigger value="financial">Financier</TabsTrigger>
            <TabsTrigger value="timeline">Historique</TabsTrigger>
            <TabsTrigger value="technical">Technique</TabsTrigger>
          </TabsList>

          {/* Vue d'ensemble - Informations essentielles */}
          <TabsContent value="overview" className="space-y-6 mt-6">
            {/* Property and dates info */}
            <StayInformation reservation={reservation} />

            {/* Guest and payment grid */}
            <div className="grid gap-6 lg:grid-cols-2">
              {/* Guest information */}
              <GuestInformation reservation={reservation} />

              {/* Payment overview */}
              <PaymentOverview reservation={reservation} />
            </div>
          </TabsContent>

          {/* Financier - Décomposition tarifaire complète */}
          <TabsContent value="financial" className="mt-6">
            <FinancialDetailsView reservation={reservation} />
          </TabsContent>

          {/* Historique - Timeline des événements */}
          <TabsContent value="timeline" className="mt-6">
            <ReservationTimeline reservation={reservation} />
          </TabsContent>

          {/* Technique - Utilisation du composant AdditionalDetails */}
          <TabsContent value="technical" className="mt-6">
            <AdditionalDetails reservation={reservation} />
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}
