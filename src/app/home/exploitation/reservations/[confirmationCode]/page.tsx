'use client';

import { AlertCircle, WifiOff } from 'lucide-react';
import { useParams, useRouter } from 'next/navigation';
import { useEffect } from 'react';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useLoadingStore } from '@/stores/loading-store';

import {
  ReservationHeader,
  StayInformation,
  PaymentOverview,
  FinancialDetailsView,
  GuestInformation,
  ReservationTimeline,
  ReservationDetailsSkeleton,
} from '../components';
import { useReservationDetails } from '../hooks';

export default function ReservationDetailsPage() {
  const params = useParams();
  const router = useRouter();
  const confirmationCode = params.confirmationCode as string;

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Réservations', href: '/home/exploitation/reservations' },
    { label: confirmationCode },
  ];

  const { reservation, isLoading, isError, error, refetch } =
    useReservationDetails({
      confirmationCode,
      queryParams: {
        include_audit_note: true,
      },
    });

  // Fermer la modale de loading quand la page est prête (succès ou erreur)
  const { hideLoading } = useLoadingStore();
  useEffect(() => {
    if (!isLoading) {
      hideLoading();
    }
  }, [isLoading, hideLoading]);

  const handleEditReservation = () => {
    router.push(`/home/exploitation/reservations/${confirmationCode}/edit`);
  };

  // Error state
  if (isError) {
    const isNotFound = error?.message === 'Réservation non trouvée';
    const hasNetworkError = error?.message?.includes('Network') ?? false;
    const hasFetchError = error?.message?.includes('fetch') ?? false;
    const isNetworkError = hasNetworkError || hasFetchError;

    let errorContent;

    if (isNetworkError) {
      errorContent = (
        <>
          <div className="bg-destructive/10 rounded-full p-4">
            <WifiOff className="text-destructive h-12 w-12" />
          </div>
          <h2 className="text-2xl font-semibold">Erreur de connexion</h2>
          <p className="text-muted-foreground">
            Impossible de se connecter au serveur. Vérifiez votre connexion
            internet et réessayez.
          </p>
        </>
      );
    } else if (isNotFound) {
      errorContent = (
        <>
          <div className="bg-muted rounded-full p-4">
            <AlertCircle className="text-muted-foreground h-12 w-12" />
          </div>
          <h2 className="text-2xl font-semibold">Réservation introuvable</h2>
          <p className="text-muted-foreground">
            La réservation avec le code <strong>{confirmationCode}</strong>{' '}
            n&apos;existe pas ou a été supprimée.
          </p>
        </>
      );
    } else {
      errorContent = (
        <>
          <div className="bg-destructive/10 rounded-full p-4">
            <AlertCircle className="text-destructive h-12 w-12" />
          </div>
          <h2 className="text-2xl font-semibold">Une erreur est survenue</h2>
          <p className="text-muted-foreground">
            {error?.message ??
              'Impossible de charger les détails de la réservation.'}
          </p>
        </>
      );
    }

    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="flex min-h-[60vh] flex-col items-center justify-center gap-6 p-8">
          <div className="flex max-w-md flex-col items-center gap-4 text-center">
            {errorContent}

            <div className="mt-4 flex gap-3">
              <Button variant="outline" onClick={() => window.history.back()}>
                Retour
              </Button>
              {!isNotFound && (
                <Button onClick={() => refetch()}>Réessayer</Button>
              )}
            </div>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Loading state
  if (isLoading || !reservation) {
    return (
      <DashboardLayout breadcrumbs={breadcrumbs}>
        <div className="container mx-auto py-6">
          <ReservationDetailsSkeleton />
        </div>
      </DashboardLayout>
    );
  }

  // Success state with data
  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="container mx-auto py-6">
        {/* Header section */}
        <ReservationHeader
          reservation={reservation}
          onEdit={handleEditReservation}
        />

        {/* Main content with tabs */}
        <Tabs defaultValue="overview" className="mt-6">
          <TabsList className="mb-6 grid w-full grid-cols-3 gap-3 p-1">
            <TabsTrigger
              value="overview"
              style={{
                cursor: 'pointer',
                border: '1px solid #d1d5db',
                backgroundColor: 'white',
                color: '#374151',
                fontWeight: '500',
                transition: 'all 0.2s',
              }}
              className="hover:bg-gray-50 data-[state=active]:!border-[#0d1b3c] data-[state=active]:!bg-[#0d1b3c] data-[state=active]:!text-white"
            >
              Vue d&apos;ensemble
            </TabsTrigger>
            <TabsTrigger
              value="financial"
              style={{
                cursor: 'pointer',
                border: '1px solid #d1d5db',
                backgroundColor: 'white',
                color: '#374151',
                fontWeight: '500',
                transition: 'all 0.2s',
              }}
              className="hover:bg-gray-50 data-[state=active]:!border-[#0d1b3c] data-[state=active]:!bg-[#0d1b3c] data-[state=active]:!text-white"
            >
              Financier
            </TabsTrigger>
            <TabsTrigger
              value="timeline"
              style={{
                cursor: 'pointer',
                border: '1px solid #d1d5db',
                backgroundColor: 'white',
                color: '#374151',
                fontWeight: '500',
                transition: 'all 0.2s',
              }}
              className="hover:bg-gray-50 data-[state=active]:!border-[#0d1b3c] data-[state=active]:!bg-[#0d1b3c] data-[state=active]:!text-white"
            >
              Historique
            </TabsTrigger>
          </TabsList>

          {/* Vue d'ensemble - Informations essentielles */}
          <TabsContent value="overview" className="mt-6 space-y-6">
            {/* Property and dates info */}
            <StayInformation reservation={reservation} />

            {/* Guest and payment grid */}
            <div className="grid gap-6 lg:grid-cols-2">
              {/* Guest information */}
              <GuestInformation reservation={reservation} />

              {/* Payment overview */}
              <PaymentOverview reservation={reservation} />
            </div>
          </TabsContent>

          {/* Financier - Décomposition tarifaire complète */}
          <TabsContent value="financial" className="mt-6">
            <FinancialDetailsView reservation={reservation} />
          </TabsContent>

          {/* Historique - Timeline des événements */}
          <TabsContent value="timeline" className="mt-6">
            <ReservationTimeline reservation={reservation} />
          </TabsContent>

          {/* Onglet Technique supprimé */}
        </Tabs>
      </div>
    </DashboardLayout>
  );
}
