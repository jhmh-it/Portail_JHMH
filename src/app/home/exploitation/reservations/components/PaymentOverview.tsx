import { CreditCard, AlertTriangle } from 'lucide-react';

import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';

import type { ReservationDetails } from '../types/reservation-details';

interface PaymentOverviewProps {
  reservation: ReservationDetails;
}

export function PaymentOverview({ reservation }: PaymentOverviewProps) {
  const currency =
    reservation.currency ??
    (reservation as unknown as { money_currency?: string }).money_currency ??
    'EUR';

  const legacy = reservation as unknown as {
    TOTAL_TTC?: number;
    money_fareAccommodation?: number;
    money_totalPaid?: number;
    money_balanceDue?: number;
    money_hostPayout?: number;
    money_hostServiceFee?: number;
    money_totalTaxes?: number;
    STATE?: string;
  };
  const totalDue =
    legacy.TOTAL_TTC ??
    reservation.total_ttc ??
    legacy.money_fareAccommodation ??
    0;
  const totalPaid = legacy.money_totalPaid ?? 0;
  const balanceDue = legacy.money_balanceDue ?? totalDue - totalPaid;
  const hostPayout = legacy.money_hostPayout ?? 0;
  const hostServiceFee = legacy.money_hostServiceFee ?? 0;
  const totalTaxes = legacy.money_totalTaxes ?? reservation.CITY_TAX ?? 0;

  const paymentProgress = totalDue > 0 ? (totalPaid / totalDue) * 100 : 0;
  const isFullyPaid = balanceDue <= 0;
  const status = legacy.STATE ?? reservation.status;
  const isCompleted = status === 'CHECKED-OUT' || status === 'terminee';
  const isOverdue = balanceDue > 0 && isCompleted;

  const formatCurrency = (amount: number | null | undefined) => {
    if (amount == null) return '-';
    const code = currency ?? 'EUR';
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: code,
    }).format(amount);
  };

  return (
    <div className="space-y-4">
      {isOverdue && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            Solde impayé de {formatCurrency(balanceDue)} - Réservation terminée
          </AlertDescription>
        </Alert>
      )}

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-lg">
            <CreditCard className="h-5 w-5" /> État des paiements
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Progression du paiement</span>
              <span className="font-medium">
                {Math.round(paymentProgress)}%
              </span>
            </div>
            <Progress value={paymentProgress} className="h-2" />
            <div className="text-muted-foreground flex justify-between text-xs">
              <span>Payé: {formatCurrency(totalPaid)}</span>
              <span>Total: {formatCurrency(totalDue)}</span>
            </div>
          </div>

          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-3">
              <h4 className="text-sm font-medium">Détails client</h4>
              <div className="flex items-center justify-between">
                <span className="text-muted-foreground text-sm">
                  Total à payer
                </span>
                <span className="font-medium">{formatCurrency(totalDue)}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-muted-foreground text-sm">
                  Montant payé
                </span>
                <span className="font-medium text-green-600">
                  {formatCurrency(totalPaid)}
                </span>
              </div>
              <div className="flex items-center justify-between border-t pt-3">
                <span className="text-sm font-medium">Solde restant</span>
                <Badge
                  variant={(() => {
                    if (isFullyPaid) return 'secondary';
                    if (isOverdue) return 'destructive';
                    return 'outline';
                  })()}
                >
                  {formatCurrency(balanceDue)}
                </Badge>
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="text-sm font-medium">Détails hôte</h4>
              {hostPayout > 0 ? (
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground text-sm">
                    Versement hôte
                  </span>
                  <span className="font-medium">
                    {formatCurrency(hostPayout)}
                  </span>
                </div>
              ) : null}
              {hostServiceFee > 0 ? (
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground text-sm">
                    Frais de service
                  </span>
                  <span className="font-medium">
                    {formatCurrency(hostServiceFee)}
                  </span>
                </div>
              ) : null}
              {totalTaxes > 0 ? (
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground text-sm">
                    Total taxes
                  </span>
                  <span className="font-medium">
                    {formatCurrency(totalTaxes)}
                  </span>
                </div>
              ) : null}
              {hostPayout > 0 && (
                <div className="flex items-center justify-between border-t pt-3">
                  <span className="text-sm font-medium">Net hôte</span>
                  <span className="font-medium">
                    {formatCurrency(hostPayout - hostServiceFee)}
                  </span>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
