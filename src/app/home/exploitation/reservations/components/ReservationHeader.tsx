import {
  Hash,
  MapPin,
  Users,
  Building2,
  Edit,
  ExternalLink,
} from 'lucide-react';
import Link from 'next/link';

import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';

import { useGuestId } from '../hooks';
import type { ReservationDetails } from '../types/reservation-details';
import { extractGuestName, readFirst } from '../utils/guest-helpers';

import {
  getDisplayStatus,
  getDisplayPlatform,
  extractGuestBreakdown,
} from './data-processors';

interface ReservationHeaderProps {
  reservation: ReservationDetails;
  onEdit?: () => void;
}

export function ReservationHeader({
  reservation,
  onEdit,
}: ReservationHeaderProps) {
  // Utiliser le hook pour récupérer le guest_id
  const guestId = useGuestId(reservation);

  // Extraire le nom du guest
  const guestName = extractGuestName(reservation as Record<string, unknown>);
  const listingInfo = (
    reservation as unknown as {
      listing_info?: { nickname?: string; full_address?: string };
    }
  ).listing_info;
  const listingName = readFirst<string>(
    listingInfo?.nickname,
    (reservation as unknown as { LISTING_NAME?: string }).LISTING_NAME,
    (reservation as unknown as { reservation_listing_nickname?: string })
      .reservation_listing_nickname,
    reservation.listing_name
  );
  // Privilégier listing_info.full_address pour avoir l'adresse complète
  const fullAddress = readFirst<string>(
    listingInfo?.full_address,
    (reservation as unknown as { reservation_listing_full_address?: string })
      .reservation_listing_full_address,
    (reservation as unknown as { listing_full_address?: string })
      .listing_full_address
  );

  const { label: statusLabel } = getDisplayStatus(reservation);
  const { label: platformLabel } = getDisplayPlatform(reservation);
  const guests = extractGuestBreakdown(reservation);

  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-6 lg:flex-row lg:items-start lg:justify-between">
        <div className="flex flex-col gap-4">
          <div className="flex flex-wrap items-center gap-3">
            <h1 className="flex items-center gap-2 text-3xl font-bold tracking-tight">
              <Hash className="text-primary h-8 w-8" />
              {reservation.confirmationCode ??
                ((reservation as Record<string, unknown>).REF as string) ??
                'N/A'}
            </h1>
            <Badge variant="outline" className="text-sm">
              {statusLabel}
            </Badge>
          </div>

          <div className="flex flex-col gap-2">
            {guestName && (
              <div className="text-muted-foreground flex items-center gap-2">
                <Users className="h-4 w-4" />
                {guestId ? (
                  <Link
                    href={`/home/exploitation/guests/${guestId}`}
                    className="text-primary font-medium transition-colors hover:underline"
                  >
                    {guestName}
                  </Link>
                ) : (
                  <span className="text-foreground font-medium">
                    {guestName}
                  </span>
                )}
                {guests.total > 0 && (
                  <span className="text-sm">
                    ({guests.total}{' '}
                    {guests.total > 1 ? 'personnes' : 'personne'})
                  </span>
                )}
              </div>
            )}

            {(listingName ?? fullAddress) && (
              <div className="text-muted-foreground flex items-start gap-2">
                <MapPin className="mt-0.5 h-4 w-4 flex-shrink-0" />
                <div className="flex flex-col">
                  {listingName && fullAddress ? (
                    <a
                      href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(fullAddress)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-primary inline-flex items-center gap-1 font-medium hover:underline"
                    >
                      {listingName}
                      <ExternalLink className="h-3 w-3" />
                    </a>
                  ) : (
                    listingName && (
                      <span className="text-foreground font-medium">
                        {listingName}
                      </span>
                    )
                  )}
                  {fullAddress && (
                    <a
                      href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(fullAddress)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-primary inline-flex items-center gap-1 text-sm hover:underline"
                    >
                      {fullAddress}
                      <ExternalLink className="h-3 w-3" />
                    </a>
                  )}
                </div>
              </div>
            )}

            <div className="text-muted-foreground flex items-center gap-2">
              <Building2 className="h-4 w-4" />
              <span className="text-sm">Réservé via</span>
              <Badge variant="outline" className="text-xs">
                {platformLabel}
              </Badge>
            </div>
          </div>
        </div>

        <div className="flex flex-col gap-2">
          {onEdit && (
            <Button size="sm" onClick={onEdit} className="mt-2 gap-2">
              <Edit className="h-4 w-4" /> Modifier la réservation
            </Button>
          )}
        </div>
      </div>

      <Separator />
    </div>
  );
}
