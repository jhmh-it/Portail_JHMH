'use client';

import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { CalendarIcon, Filter, RefreshCw, Search, X } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Calendar } from '@/components/ui/calendar';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { cn } from '@/lib/utils';

import {
  CURRENCY_OPTIONS,
  OTA_OPTIONS,
  PAGE_SIZE_OPTIONS,
  STATUS_OPTIONS,
} from '../constants';
import type { ReservationFilters } from '../types/reservations.types';

interface Props {
  showFilters: boolean;
  setShowFilters: (v: boolean) => void;
  showAdvancedFilters: boolean;
  setShowAdvancedFilters: (v: boolean) => void;
  searchQuery: string;
  setSearchQuery: (v: string) => void;
  filters: ReservationFilters;
  handleSearch: () => void;
  handleFilterChange: (
    key: keyof ReservationFilters,
    value: string | number | undefined
  ) => void;
  handlePageSizeChange: (pageSize: string) => void;
  handleClearFilters: () => void;
  hasActiveFilters: boolean;
  isFetching: boolean;
  refetch: () => void;
}

export function ReservationsFilters(props: Props) {
  const {
    showFilters,
    setShowFilters,
    showAdvancedFilters,
    setShowAdvancedFilters,
    searchQuery,
    setSearchQuery,
    filters,
    handleSearch,
    handleFilterChange,
    handlePageSizeChange,
    handleClearFilters,
    hasActiveFilters,
    isFetching,
    refetch,
  } = props;

  return (
    <Card className="shadow-sm">
      <CardHeader className="pb-4">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-base font-medium">
            <Filter className="h-4 w-4" />
            Filtres de recherche
          </CardTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowFilters(!showFilters)}
            className="text-muted-foreground"
          >
            {showFilters ? 'Masquer' : 'Afficher'}
          </Button>
        </div>
      </CardHeader>

      {showFilters && (
        <CardContent className="pt-0">
          {/* Search Bar */}
          <div className="mb-6">
            <div className="relative">
              <Search className="text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2 transform" />
              <Input
                placeholder="Rechercher par code de confirmation, nom du client ou listing..."
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                onKeyDown={e => e.key === 'Enter' && handleSearch()}
                className="bg-muted/50 border-muted-foreground/20 focus:bg-background h-11 pr-28 pl-10"
              />
              <Button
                onClick={handleSearch}
                size="sm"
                className="absolute top-1/2 right-2 h-8 -translate-y-1/2 transform"
              >
                Rechercher
              </Button>
            </div>
          </div>

          {/* Filter Grid */}
          <div className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              {/* Status filter */}
              <div className="space-y-2">
                <Label className="text-sm font-medium">Statut</Label>
                <Select
                  value={filters.status ?? 'all'}
                  onValueChange={value =>
                    handleFilterChange(
                      'status',
                      value === 'all' ? undefined : value
                    )
                  }
                >
                  <SelectTrigger className="h-10">
                    <SelectValue placeholder="Tous les statuts" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Tous les statuts</SelectItem>
                    {STATUS_OPTIONS.map(status => (
                      <SelectItem key={status.value} value={status.value}>
                        {status.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* OTA filter */}
              <div className="space-y-2">
                <Label className="text-sm font-medium">Plateforme</Label>
                <Select
                  value={filters.ota ?? 'all'}
                  onValueChange={value =>
                    handleFilterChange(
                      'ota',
                      value === 'all' ? undefined : value
                    )
                  }
                >
                  <SelectTrigger className="h-10">
                    <SelectValue placeholder="Toutes les plateformes" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Toutes les plateformes</SelectItem>
                    {OTA_OPTIONS.map(platform => (
                      <SelectItem key={platform.value} value={platform.value}>
                        {platform.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Date range */}
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Date d&apos;arrivée (depuis)
                </Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        'h-10 w-full justify-start text-left font-normal',
                        !filters.checkinDateFrom && 'text-muted-foreground'
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {filters.checkinDateFrom
                        ? format(
                            new Date(filters.checkinDateFrom),
                            'dd MMMM yyyy',
                            { locale: fr }
                          )
                        : 'Sélectionner une date'}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={
                        filters.checkinDateFrom
                          ? new Date(filters.checkinDateFrom)
                          : undefined
                      }
                      onSelect={date =>
                        handleFilterChange(
                          'checkinDateFrom',
                          date ? format(date, 'yyyy-MM-dd') : undefined
                        )
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Date d&apos;arrivée (jusqu&apos;à)
                </Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        'h-10 w-full justify-start text-left font-normal',
                        !filters.checkinDateTo && 'text-muted-foreground'
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {filters.checkinDateTo
                        ? format(
                            new Date(filters.checkinDateTo),
                            'dd MMMM yyyy',
                            { locale: fr }
                          )
                        : 'Sélectionner une date'}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={
                        filters.checkinDateTo
                          ? new Date(filters.checkinDateTo)
                          : undefined
                      }
                      onSelect={date =>
                        handleFilterChange(
                          'checkinDateTo',
                          date ? format(date, 'yyyy-MM-dd') : undefined
                        )
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>
            </div>

            {/* Advanced Filters Section */}
            <div className="space-y-4 border-t pt-4">
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                  className="text-muted-foreground h-8 px-2"
                >
                  <Filter className="mr-2 h-3 w-3" />
                  Filtres avancés
                  {showAdvancedFilters ? ' (masquer)' : ' (afficher)'}
                </Button>
              </div>

              {showAdvancedFilters && (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {/* Dates de départ */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Date de départ (depuis)
                    </Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            'h-10 w-full justify-start text-left font-normal',
                            !filters.checkoutDateFrom && 'text-muted-foreground'
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {filters.checkoutDateFrom
                            ? format(
                                new Date(filters.checkoutDateFrom),
                                'dd MMMM yyyy',
                                { locale: fr }
                              )
                            : 'Sélectionner une date'}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={
                            filters.checkoutDateFrom
                              ? new Date(filters.checkoutDateFrom)
                              : undefined
                          }
                          onSelect={date =>
                            handleFilterChange(
                              'checkoutDateFrom',
                              date ? format(date, 'yyyy-MM-dd') : undefined
                            )
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Date de départ (jusqu&apos;à)
                    </Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            'h-10 w-full justify-start text-left font-normal',
                            !filters.checkoutDateTo && 'text-muted-foreground'
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {filters.checkoutDateTo
                            ? format(
                                new Date(filters.checkoutDateTo),
                                'dd MMMM yyyy',
                                { locale: fr }
                              )
                            : 'Sélectionner une date'}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={
                            filters.checkoutDateTo
                              ? new Date(filters.checkoutDateTo)
                              : undefined
                          }
                          onSelect={date =>
                            handleFilterChange(
                              'checkoutDateTo',
                              date ? format(date, 'yyyy-MM-dd') : undefined
                            )
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>

                  {/* Devise */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Devise</Label>
                    <Select
                      value={filters.currency ?? 'all'}
                      onValueChange={value =>
                        handleFilterChange(
                          'currency',
                          value === 'all' ? undefined : value
                        )
                      }
                    >
                      <SelectTrigger className="h-10">
                        <SelectValue placeholder="Toutes les devises" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Toutes les devises</SelectItem>
                        {CURRENCY_OPTIONS.map(currency => (
                          <SelectItem
                            key={currency.value}
                            value={currency.value}
                          >
                            {currency.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Montant minimum */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Montant minimum (€)
                    </Label>
                    <Input
                      type="number"
                      placeholder="Ex: 50"
                      value={filters.amountMin ?? ''}
                      onChange={e =>
                        handleFilterChange(
                          'amountMin',
                          e.target.value
                            ? parseFloat(e.target.value)
                            : undefined
                        )
                      }
                      className="h-10"
                    />
                  </div>

                  {/* Montant maximum */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Montant maximum (€)
                    </Label>
                    <Input
                      type="number"
                      placeholder="Ex: 500"
                      value={filters.amountMax ?? ''}
                      onChange={e =>
                        handleFilterChange(
                          'amountMax',
                          e.target.value
                            ? parseFloat(e.target.value)
                            : undefined
                        )
                      }
                      className="h-10"
                    />
                  </div>

                  {/* Nombre de nuits minimum */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Nuits minimum</Label>
                    <Input
                      type="number"
                      placeholder="Ex: 1"
                      value={filters.nightsMin ?? ''}
                      onChange={e =>
                        handleFilterChange(
                          'nightsMin',
                          e.target.value ? parseInt(e.target.value) : undefined
                        )
                      }
                      className="h-10"
                    />
                  </div>

                  {/* Nombre de nuits maximum */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Nuits maximum</Label>
                    <Input
                      type="number"
                      placeholder="Ex: 30"
                      value={filters.nightsMax ?? ''}
                      onChange={e =>
                        handleFilterChange(
                          'nightsMax',
                          e.target.value ? parseInt(e.target.value) : undefined
                        )
                      }
                      className="h-10"
                    />
                  </div>

                  {/* Nombre d'invités minimum */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Invités minimum
                    </Label>
                    <Input
                      type="number"
                      placeholder="Ex: 1"
                      value={filters.guestsMin ?? ''}
                      onChange={e =>
                        handleFilterChange(
                          'guestsMin',
                          e.target.value ? parseInt(e.target.value) : undefined
                        )
                      }
                      className="h-10"
                    />
                  </div>

                  {/* Nombre d'invités maximum */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Invités maximum
                    </Label>
                    <Input
                      type="number"
                      placeholder="Ex: 10"
                      value={filters.guestsMax ?? ''}
                      onChange={e =>
                        handleFilterChange(
                          'guestsMax',
                          e.target.value ? parseInt(e.target.value) : undefined
                        )
                      }
                      className="h-10"
                    />
                  </div>
                </div>
              )}
            </div>

            {/* Second row with page size and actions */}
            <div className="flex items-end justify-between gap-4 border-t pt-2">
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Résultats par page
                </Label>
                <Select
                  value={filters.page_size?.toString() ?? '20'}
                  onValueChange={handlePageSizeChange}
                >
                  <SelectTrigger className="h-10 w-[140px]">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {PAGE_SIZE_OPTIONS.map(size => (
                      <SelectItem key={size.value} value={size.value}>
                        {size.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Actions */}
              <div className="flex gap-2">
                {hasActiveFilters && (
                  <Button
                    variant="outline"
                    onClick={handleClearFilters}
                    className="h-10"
                  >
                    <X className="mr-2 h-4 w-4" />
                    Réinitialiser
                  </Button>
                )}
                <Button
                  variant="outline"
                  onClick={refetch}
                  disabled={isFetching}
                  className="h-10"
                >
                  <RefreshCw
                    className={`mr-2 h-4 w-4 ${isFetching ? 'animate-spin' : ''}`}
                  />
                  {isFetching ? 'Actualisation...' : 'Actualiser'}
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  );
}
