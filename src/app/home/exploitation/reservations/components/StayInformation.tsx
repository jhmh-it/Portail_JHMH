import { Calendar, Home, MapPin, ExternalLink } from 'lucide-react';

import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

import type { ReservationDetails } from '../types/reservation-details';

import {
  getDisplayStatus,
  getDisplayPlatform,
  getListingInfo,
  extractDateInformation,
} from './data-processors';

interface StayInformationProps {
  reservation: ReservationDetails;
}

export function StayInformation({ reservation }: StayInformationProps) {
  const { name: listingName, address: listingAddress } =
    getListingInfo(reservation);
  const dates = extractDateInformation(reservation);
  const nights = dates.nights ?? 0;
  const nightsInt = Number.isFinite(Number(nights))
    ? Math.round(Number(nights))
    : 0;
  const checkin = dates.checkin;
  const checkout = dates.checkout;
  const status = getDisplayStatus(reservation);
  const platform = getDisplayPlatform(reservation);

  const formatDate = (dateStr: string | null) => {
    if (!dateStr) return '-';
    try {
      const d = new Date(dateStr);
      return d.toLocaleDateString('fr-FR', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
    } catch {
      return dateStr;
    }
  };

  const formatDateTime = (dateStr: string | null) => {
    if (!dateStr) return { date: '-', time: '' };
    try {
      const d = new Date(dateStr);
      return {
        date: d.toLocaleDateString('fr-FR', {
          weekday: 'short',
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }),
        time: d.toLocaleTimeString('fr-FR', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    } catch {
      return { date: dateStr, time: '' } as const;
    }
  };

  return (
    <div className="grid gap-6 md:grid-cols-2">
      <Card>
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-lg">
              <Home className="h-5 w-5" /> Logement
            </CardTitle>
            <Badge variant={status.variant} className="text-sm">
              {status.label}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {listingName && (
            <div className="space-y-3">
              <a
                href={
                  listingAddress
                    ? `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(listingAddress)}`
                    : undefined
                }
                target={listingAddress ? '_blank' : undefined}
                rel={listingAddress ? 'noopener noreferrer' : undefined}
                className="text-primary inline-flex items-center gap-1 text-lg leading-tight font-semibold hover:underline"
              >
                {listingName}
                {listingAddress && <ExternalLink className="h-3 w-3" />}
              </a>
              <Badge variant="outline" className="ml-3 font-normal">
                {platform.label}
              </Badge>
              {listingAddress && (
                <div className="space-y-2">
                  <div className="flex items-start gap-3">
                    <MapPin className="text-muted-foreground mt-1 h-4 w-4 flex-shrink-0" />
                    <div className="flex-1">
                      <a
                        href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(listingAddress)}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary inline-flex items-center gap-1 text-sm leading-relaxed transition-colors hover:underline"
                      >
                        {listingAddress}
                        <ExternalLink className="h-3 w-3 opacity-70" />
                      </a>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Calendar className="h-5 w-5" />
            Dates du séjour ({nightsInt} nuit{nightsInt > 1 ? 's' : ''})
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-2 gap-6">
            <div className="space-y-1">
              <p className="text-muted-foreground text-sm font-medium">
                Arrivée
              </p>
              {checkin ? (
                (() => {
                  const f = formatDateTime(checkin);
                  return f.date === '-' ? (
                    <p className="text-muted-foreground">-</p>
                  ) : (
                    <div className="space-y-1">
                      <p className="font-semibold">{f.date}</p>
                      <p className="text-muted-foreground text-sm">{f.time}</p>
                    </div>
                  );
                })()
              ) : (
                <p className="text-muted-foreground">-</p>
              )}
            </div>

            <div className="space-y-1">
              <p className="text-muted-foreground text-sm font-medium">
                Départ
              </p>
              {checkout ? (
                (() => {
                  const f = formatDateTime(checkout);
                  return f.date === '-' ? (
                    <p className="text-muted-foreground">-</p>
                  ) : (
                    <div className="space-y-1">
                      <p className="font-semibold">{f.date}</p>
                      <p className="text-muted-foreground text-sm">{f.time}</p>
                    </div>
                  );
                })()
              ) : (
                <p className="text-muted-foreground">-</p>
              )}
            </div>
          </div>

          {/* Other important dates from API (confirmed_at etc.) */}
          <div className="space-y-3">
            {dates.booking && (
              <div className="flex items-center gap-3">
                <span className="text-muted-foreground text-sm">
                  Réservé le
                </span>
                <span className="text-sm font-medium">
                  {formatDate(dates.booking)}
                </span>
              </div>
            )}
            {dates.confirmation && dates.confirmation !== dates.booking && (
              <div className="flex items-center gap-3">
                <span className="text-muted-foreground text-sm">
                  Confirmé le
                </span>
                <span className="text-sm font-medium">
                  {formatDate(dates.confirmation)}
                </span>
              </div>
            )}
            {dates.cancellation && (
              <div className="text-destructive flex items-center gap-3">
                <span className="text-sm">Annulé le</span>
                <span className="text-sm font-medium">
                  {formatDate(dates.cancellation)}
                </span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
