'use client';

import { useCallback, useMemo, useState } from 'react';

import type { ReservationFilters } from '../types/reservations.types';

export interface UseReservationFiltersReturn {
  filters: ReservationFilters;
  searchQuery: string;
  setSearchQuery: (value: string) => void;
  handleSearch: () => void;
  handleFilterChange: (
    key: keyof ReservationFilters,
    value: string | number | undefined
  ) => void;
  handlePageChange: (page: number) => void;
  handlePageSizeChange: (pageSize: string) => void;
  handleClearFilters: () => void;
  hasActiveFilters: boolean;
}

export function useReservationFilters(
  initial: ReservationFilters = { page: 1, page_size: 20 }
): UseReservationFiltersReturn {
  const [filters, setFilters] = useState<ReservationFilters>(initial);
  const [searchQuery, setSearchQuery] = useState('');

  const handleSearch = useCallback(() => {
    setFilters(prev => ({ ...prev, q: searchQuery || undefined, page: 1 }));
  }, [searchQuery]);

  const handleFilterChange = useCallback(
    (key: keyof ReservationFilters, value: string | number | undefined) => {
      setFilters(prev => ({ ...prev, [key]: value, page: 1 }));
    },
    []
  );

  const handlePageChange = useCallback((page: number) => {
    setFilters(prev => ({ ...prev, page }));
  }, []);

  const handlePageSizeChange = useCallback((pageSize: string) => {
    setFilters(prev => ({ ...prev, page_size: parseInt(pageSize), page: 1 }));
  }, []);

  const handleClearFilters = useCallback(() => {
    setFilters({ page: 1, page_size: 20 });
    setSearchQuery('');
  }, []);

  const hasActiveFilters = useMemo(() => {
    return (
      Boolean(searchQuery) ||
      Boolean(filters.status) ||
      Boolean(filters.ota) ||
      Boolean(filters.checkinDateFrom) ||
      Boolean(filters.checkinDateTo) ||
      Boolean(filters.checkoutDateFrom) ||
      Boolean(filters.checkoutDateTo) ||
      Boolean(filters.amountMin) ||
      Boolean(filters.amountMax) ||
      Boolean(filters.nightsMin) ||
      Boolean(filters.nightsMax) ||
      Boolean(filters.guestsMin) ||
      Boolean(filters.guestsMax) ||
      Boolean(filters.currency)
    );
  }, [filters, searchQuery]);

  return {
    filters,
    searchQuery,
    setSearchQuery,
    handleSearch,
    handleFilterChange,
    handlePageChange,
    handlePageSizeChange,
    handleClearFilters,
    hasActiveFilters,
  };
}
