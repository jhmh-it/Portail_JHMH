'use client';

import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import {
  Search,
  Filter,
  RefreshCw,
  BookOpen,
  X,
  CalendarIcon,
} from 'lucide-react';
import { useState, useEffect } from 'react';

import { DashboardLayout } from '@/components/dashboard/dashboard-layout';
import { Button } from '@/components/ui/button';
import { Calendar } from '@/components/ui/calendar';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useReservations } from '@/hooks/useReservations';
import { cn } from '@/lib/utils';
import { useLoadingStore } from '@/stores/loading-store';
import type { ReservationFilters } from '@/types/reservation';

import { ReservationsTable } from './components/ReservationsTable';

const STATUSES: { value: string; label: string }[] = [
  { value: 'CONFIRMED', label: 'Confirmée' },
  { value: 'PENDING', label: 'En attente' },
  { value: 'CANCELLED', label: 'Annulée' },
  { value: 'CHECKED-OUT', label: 'Terminée' },
  { value: 'CHECKED-IN', label: 'En cours' },
  { value: 'NO-SHOW', label: 'No show' },
];

const OTA_PLATFORMS = [
  { value: 'Booking.com', label: 'Booking.com' },
  { value: 'airbnb2', label: 'Airbnb' },
  { value: 'Hotels.com', label: 'Hotels.com' },
  { value: 'Expedia', label: 'Expedia' },
  { value: 'manual', label: 'Direct' },
];

const PAGE_SIZES = [
  { value: '10', label: '10 résultats' },
  { value: '20', label: '20 résultats' },
  { value: '50', label: '50 résultats' },
  { value: '100', label: '100 résultats' },
];

const CURRENCIES = [
  { value: 'EUR', label: 'Euro (€)' },
  { value: 'USD', label: 'Dollar ($)' },
  { value: 'GBP', label: 'Livre (£)' },
];

export default function ReservationsPage() {
  const [filters, setFilters] = useState<ReservationFilters>({
    page: 1,
    page_size: 20,
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(true);
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const { hideLoading } = useLoadingStore();

  const { data, isLoading, isFetching, error, refetch, isSuccess } =
    useReservations({
      filters,
    });

  // Fermer la modale de loading quand les données sont chargées (succès ou erreur)
  useEffect(() => {
    if (!isLoading) {
      hideLoading();
    }
  }, [isLoading, hideLoading]);

  const breadcrumbs = [
    { label: 'Accueil', href: '/home' },
    { label: 'Exploitation', href: '/home/exploitation' },
    { label: 'Réservations' },
  ];

  const handleSearch = () => {
    setFilters(prev => ({
      ...prev,
      q: searchQuery || undefined,
      page: 1, // Reset to first page on new search
    }));
  };

  const handleFilterChange = (
    key: keyof ReservationFilters,
    value: string | number | undefined
  ) => {
    setFilters(prev => ({
      ...prev,
      [key]: value,
      page: 1, // Reset to first page on filter change
    }));
  };

  const handlePageChange = (page: number) => {
    setFilters(prev => ({ ...prev, page }));
  };

  const handlePageSizeChange = (page_size: string) => {
    setFilters(prev => ({
      ...prev,
      page_size: parseInt(page_size),
      page: 1,
    }));
  };

  const handleClearFilters = () => {
    setFilters({
      page: 1,
      page_size: 20,
    });
    setSearchQuery('');
  };

  // Check if any filters are active
  const hasActiveFilters =
    Boolean(searchQuery) ||
    Boolean(filters.status) ||
    Boolean(filters.ota) ||
    Boolean(filters.checkinDateFrom) ||
    Boolean(filters.checkinDateTo) ||
    Boolean(filters.checkoutDateFrom) ||
    Boolean(filters.checkoutDateTo) ||
    Boolean(filters.amountMin) ||
    Boolean(filters.amountMax) ||
    Boolean(filters.nightsMin) ||
    Boolean(filters.nightsMax) ||
    Boolean(filters.guestsMin) ||
    Boolean(filters.guestsMax) ||
    Boolean(filters.currency);

  return (
    <DashboardLayout breadcrumbs={breadcrumbs}>
      <div className="flex flex-col gap-6 py-6">
        {/* Header */}
        <div className="flex flex-col gap-2">
          <div className="flex items-center gap-3">
            <BookOpen className="h-8 w-8 text-primary" />
            <h1 className="text-3xl font-bold tracking-tight">Réservations</h1>
          </div>
          <p className="text-muted-foreground">
            Gérez et consultez toutes les réservations en temps réel
          </p>
        </div>

        {/* Filters */}
        <Card className="shadow-sm">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <CardTitle className="text-base font-medium flex items-center gap-2">
                <Filter className="h-4 w-4" />
                Filtres de recherche
              </CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowFilters(!showFilters)}
                className="text-muted-foreground"
              >
                {showFilters ? 'Masquer' : 'Afficher'}
              </Button>
            </div>
          </CardHeader>

          {showFilters && (
            <CardContent className="pt-0">
              {/* Search Bar */}
              <div className="mb-6">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Rechercher par code de confirmation, nom du client ou listing..."
                    value={searchQuery}
                    onChange={e => setSearchQuery(e.target.value)}
                    onKeyDown={e => e.key === 'Enter' && handleSearch()}
                    className="pl-10 pr-28 h-11 bg-muted/50 border-muted-foreground/20 focus:bg-background"
                  />
                  <Button
                    onClick={handleSearch}
                    size="sm"
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8"
                  >
                    Rechercher
                  </Button>
                </div>
              </div>

              {/* Filter Grid */}
              <div className="space-y-4">
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                  {/* Status filter */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Statut</Label>
                    <Select
                      value={filters.status ?? 'all'}
                      onValueChange={value =>
                        handleFilterChange(
                          'status',
                          value === 'all' ? undefined : value
                        )
                      }
                    >
                      <SelectTrigger className="h-10">
                        <SelectValue placeholder="Tous les statuts" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Tous les statuts</SelectItem>
                        {STATUSES.map(status => (
                          <SelectItem key={status.value} value={status.value}>
                            {status.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* OTA filter */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Plateforme</Label>
                    <Select
                      value={filters.ota ?? 'all'}
                      onValueChange={value =>
                        handleFilterChange(
                          'ota',
                          value === 'all' ? undefined : value
                        )
                      }
                    >
                      <SelectTrigger className="h-10">
                        <SelectValue placeholder="Toutes les plateformes" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">
                          Toutes les plateformes
                        </SelectItem>
                        {OTA_PLATFORMS.map(platform => (
                          <SelectItem
                            key={platform.value}
                            value={platform.value}
                          >
                            {platform.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Date range */}
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Date d&apos;arrivée (depuis)
                    </Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            'w-full h-10 justify-start text-left font-normal',
                            !filters.checkinDateFrom && 'text-muted-foreground'
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {filters.checkinDateFrom
                            ? format(
                                new Date(filters.checkinDateFrom),
                                'dd MMMM yyyy',
                                { locale: fr }
                              )
                            : 'Sélectionner une date'}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={
                            filters.checkinDateFrom
                              ? new Date(filters.checkinDateFrom)
                              : undefined
                          }
                          onSelect={date =>
                            handleFilterChange(
                              'checkinDateFrom',
                              date ? format(date, 'yyyy-MM-dd') : undefined
                            )
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Date d&apos;arrivée (jusqu&apos;à)
                    </Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          className={cn(
                            'w-full h-10 justify-start text-left font-normal',
                            !filters.checkinDateTo && 'text-muted-foreground'
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {filters.checkinDateTo
                            ? format(
                                new Date(filters.checkinDateTo),
                                'dd MMMM yyyy',
                                { locale: fr }
                              )
                            : 'Sélectionner une date'}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={
                            filters.checkinDateTo
                              ? new Date(filters.checkinDateTo)
                              : undefined
                          }
                          onSelect={date =>
                            handleFilterChange(
                              'checkinDateTo',
                              date ? format(date, 'yyyy-MM-dd') : undefined
                            )
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>
                </div>

                {/* Advanced Filters Section */}
                <div className="space-y-4 pt-4 border-t">
                  <div className="flex items-center gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        setShowAdvancedFilters(!showAdvancedFilters)
                      }
                      className="text-muted-foreground h-8 px-2"
                    >
                      <Filter className="h-3 w-3 mr-2" />
                      Filtres avancés
                      {showAdvancedFilters ? ' (masquer)' : ' (afficher)'}
                    </Button>
                  </div>

                  {showAdvancedFilters && (
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                      {/* Dates de départ */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Date de départ (depuis)
                        </Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant="outline"
                              className={cn(
                                'w-full h-10 justify-start text-left font-normal',
                                !filters.checkoutDateFrom &&
                                  'text-muted-foreground'
                              )}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {filters.checkoutDateFrom
                                ? format(
                                    new Date(filters.checkoutDateFrom),
                                    'dd MMMM yyyy',
                                    { locale: fr }
                                  )
                                : 'Sélectionner une date'}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={
                                filters.checkoutDateFrom
                                  ? new Date(filters.checkoutDateFrom)
                                  : undefined
                              }
                              onSelect={date =>
                                handleFilterChange(
                                  'checkoutDateFrom',
                                  date ? format(date, 'yyyy-MM-dd') : undefined
                                )
                              }
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>

                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Date de départ (jusqu&apos;à)
                        </Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant="outline"
                              className={cn(
                                'w-full h-10 justify-start text-left font-normal',
                                !filters.checkoutDateTo &&
                                  'text-muted-foreground'
                              )}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {filters.checkoutDateTo
                                ? format(
                                    new Date(filters.checkoutDateTo),
                                    'dd MMMM yyyy',
                                    { locale: fr }
                                  )
                                : 'Sélectionner une date'}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={
                                filters.checkoutDateTo
                                  ? new Date(filters.checkoutDateTo)
                                  : undefined
                              }
                              onSelect={date =>
                                handleFilterChange(
                                  'checkoutDateTo',
                                  date ? format(date, 'yyyy-MM-dd') : undefined
                                )
                              }
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>

                      {/* Devise */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">Devise</Label>
                        <Select
                          value={filters.currency ?? 'all'}
                          onValueChange={value =>
                            handleFilterChange(
                              'currency',
                              value === 'all' ? undefined : value
                            )
                          }
                        >
                          <SelectTrigger className="h-10">
                            <SelectValue placeholder="Toutes les devises" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">
                              Toutes les devises
                            </SelectItem>
                            {CURRENCIES.map(currency => (
                              <SelectItem
                                key={currency.value}
                                value={currency.value}
                              >
                                {currency.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      {/* Montant minimum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Montant minimum (€)
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 50"
                          value={filters.amountMin ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'amountMin',
                              e.target.value
                                ? parseFloat(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>

                      {/* Montant maximum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Montant maximum (€)
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 500"
                          value={filters.amountMax ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'amountMax',
                              e.target.value
                                ? parseFloat(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>

                      {/* Nombre de nuits minimum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Nuits minimum
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 1"
                          value={filters.nightsMin ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'nightsMin',
                              e.target.value
                                ? parseInt(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>

                      {/* Nombre de nuits maximum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Nuits maximum
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 30"
                          value={filters.nightsMax ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'nightsMax',
                              e.target.value
                                ? parseInt(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>

                      {/* Nombre d'invités minimum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Invités minimum
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 1"
                          value={filters.guestsMin ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'guestsMin',
                              e.target.value
                                ? parseInt(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>

                      {/* Nombre d'invités maximum */}
                      <div className="space-y-2">
                        <Label className="text-sm font-medium">
                          Invités maximum
                        </Label>
                        <Input
                          type="number"
                          placeholder="Ex: 10"
                          value={filters.guestsMax ?? ''}
                          onChange={e =>
                            handleFilterChange(
                              'guestsMax',
                              e.target.value
                                ? parseInt(e.target.value)
                                : undefined
                            )
                          }
                          className="h-10"
                        />
                      </div>
                    </div>
                  )}
                </div>

                {/* Second row with page size and actions */}
                <div className="flex items-end justify-between gap-4 pt-2 border-t">
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      Résultats par page
                    </Label>
                    <Select
                      value={filters.page_size?.toString() ?? '20'}
                      onValueChange={handlePageSizeChange}
                    >
                      <SelectTrigger className="w-[140px] h-10">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {PAGE_SIZES.map(size => (
                          <SelectItem key={size.value} value={size.value}>
                            {size.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    {hasActiveFilters && (
                      <Button
                        variant="outline"
                        onClick={handleClearFilters}
                        className="h-10"
                      >
                        <X className="h-4 w-4 mr-2" />
                        Réinitialiser
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      onClick={() => refetch()}
                      disabled={isFetching}
                      className="h-10"
                    >
                      <RefreshCw
                        className={`h-4 w-4 mr-2 ${isFetching ? 'animate-spin' : ''}`}
                      />
                      {isFetching ? 'Actualisation...' : 'Actualiser'}
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          )}
        </Card>

        {/* Results */}
        <Card className="shadow-sm overflow-visible">
          <CardHeader className="pb-4">
            <CardTitle className="text-base font-medium">
              Résultats
              {isSuccess && data && (
                <span className="text-sm font-normal text-muted-foreground ml-2">
                  ({data.total} réservation{data.total > 1 ? 's' : ''})
                </span>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-0 px-6 pb-8 overflow-visible">
            <ReservationsTable
              data={data}
              isLoading={isLoading}
              isFetching={isFetching}
              error={error}
              filters={filters}
              onPageChange={handlePageChange}
            />
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
