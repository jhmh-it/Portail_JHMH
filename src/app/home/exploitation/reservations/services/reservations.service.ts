/**
 * Service pour la gestion des réservations JHMH
 */

import axios from 'axios';

import { jhmhApiClient, ERROR_MESSAGES } from '@/lib/jhmh-api';

import type {
  ExternalReservation,
  ExternalReservationsResponse,
  ReservationFilters,
  ReservationsServiceResponse,
  ReservationServiceResponse,
} from '../types/reservations.types';

export type {
  ReservationFilters,
  ReservationsServiceResponse as ReservationServiceResponse,
};

/**
 * Construit les paramètres de requête pour l'endpoint des réservations
 */
function buildReservationQueryParams(
  params?: ReservationFilters
): URLSearchParams {
  const queryParams = new URLSearchParams();

  if (params?.page) queryParams.append('page', params.page.toString());
  if (params?.page_size)
    queryParams.append('page_size', params.page_size.toString());
  if (params?.checkinDateFrom)
    queryParams.append('checkin_date_from', params.checkinDateFrom);
  if (params?.checkinDateTo)
    queryParams.append('checkin_date_to', params.checkinDateTo);
  if (params?.checkoutDateFrom)
    queryParams.append('checkout_date_from', params.checkoutDateFrom);
  if (params?.checkoutDateTo)
    queryParams.append('checkout_date_to', params.checkoutDateTo);
  if (params?.status) queryParams.append('status', params.status);
  if (params?.ota) queryParams.append('ota', params.ota);
  if (params?.q) queryParams.append('q', params.q);
  if (params?.amountMin)
    queryParams.append('amount_min', params.amountMin.toString());
  if (params?.amountMax)
    queryParams.append('amount_max', params.amountMax.toString());
  if (params?.nightsMin)
    queryParams.append('nights_min', params.nightsMin.toString());
  if (params?.nightsMax)
    queryParams.append('nights_max', params.nightsMax.toString());
  if (params?.guestsMin)
    queryParams.append('guests_min', params.guestsMin.toString());
  if (params?.guestsMax)
    queryParams.append('guests_max', params.guestsMax.toString());
  if (params?.currency) queryParams.append('currency', params.currency);
  if (params?.confirmationCode)
    queryParams.append('confirmation_code', params.confirmationCode);

  return queryParams;
}

/**
 * Récupère les réservations depuis l'API JHMH
 */
export async function fetchJhmhReservations(
  params?: ReservationFilters
): Promise<ReservationsServiceResponse> {
  try {
    const queryParams = buildReservationQueryParams(params);
    const queryString = queryParams.toString();
    const url = `/api/reservations${queryString ? `?${queryString}` : ''}`;

    const response = await jhmhApiClient.get<ExternalReservationsResponse>(url);

    return {
      success: true,
      data: response.data.data ?? [],
      total: response.data.meta?.total ?? 0,
    };
  } catch (error) {
    console.error('Error fetching JHMH reservations:', error);

    return {
      success: false,
      data: [],
      total: 0,
      error: error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN,
    };
  }
}

/**
 * Récupère une réservation spécifique par son code de confirmation
 */
export async function fetchJhmhReservationByCode(
  confirmationCode: string
): Promise<ReservationServiceResponse> {
  try {
    const response = await jhmhApiClient.get<ExternalReservation>(
      `/api/reservations/${confirmationCode}`
    );

    return {
      success: true,
      data: response.data,
    };
  } catch (error) {
    console.error('Error fetching JHMH reservation by code:', error);

    if (axios.isAxiosError(error) && error.response?.status === 404) {
      return {
        success: false,
        data: null,
        error: 'Réservation non trouvée',
      };
    }

    return {
      success: false,
      data: null,
      error: error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN,
    };
  }
}
